<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>.automaticFlameletCreatorBackup.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/</path>
    <filename>a00032</filename>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>automaticFlameletCreator.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/</path>
    <filename>a00033</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00044" name="interpreter.hpp" local="yes" imported="no">interpreter.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>chemistry.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/chemistry/</path>
    <filename>a00034</filename>
    <includes id="a00035" name="chemistry.hpp" local="yes" imported="no">chemistry.hpp</includes>
    <includes id="a00078" name="thermo.hpp" local="yes" imported="no">thermo.hpp</includes>
    <includes id="a00042" name="constants.hpp" local="yes" imported="no">constants.hpp</includes>
  </compound>
  <compound kind="file">
    <name>chemistry.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/chemistry/</path>
    <filename>a00035</filename>
    <includes id="a00041" name="chemistryReader.hpp" local="yes" imported="no">chemistryReader.hpp</includes>
    <includes id="a00039" name="chemistryData.hpp" local="yes" imported="no">chemistryData.hpp</includes>
    <includes id="a00037" name="chemistryCalc.hpp" local="yes" imported="no">chemistryCalc.hpp</includes>
    <includes id="a00078" name="thermo.hpp" local="yes" imported="no">thermo.hpp</includes>
    <class kind="class">AFC::Chemistry</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>chemistryCalc.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/chemistry/</path>
    <filename>a00036</filename>
    <includes id="a00037" name="chemistryCalc.hpp" local="yes" imported="no">chemistryCalc.hpp</includes>
    <includes id="a00042" name="constants.hpp" local="yes" imported="no">constants.hpp</includes>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a2da602e9fbfb41adb1cf25f1cecf2375</anchor>
      <arglist>(chemData.TROE(r))</arglist>
    </member>
    <member kind="function">
      <type>chemData</type>
      <name>updateKf</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a43df880961594697455e5cef29ba2114</anchor>
      <arglist>(kinf *(pred/(1+pred))*F)</arglist>
    </member>
    <member kind="function">
      <type>*</type>
      <name>calculateKf</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a668f618bb503c41d58e5c6a95ce0b117</anchor>
      <arglist>(r, T, chemData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ac18a40885fa0bb8a7213a6bcad75fed9</anchor>
      <arglist>(!found)</arglist>
    </member>
    <member kind="variable">
      <type>scalar</type>
      <name>F</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>acec1813e4b607df81f63e3e2014c3338</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>kb</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aeb1a5067dbf1ae4b6e28ba40a10794a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>else</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a0544c3fe466e421738dae463968b70ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>chemistryCalc.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/chemistry/</path>
    <filename>a00037</filename>
    <includes id="a00039" name="chemistryData.hpp" local="yes" imported="no">chemistryData.hpp</includes>
    <includes id="a00078" name="thermo.hpp" local="yes" imported="no">thermo.hpp</includes>
    <class kind="class">AFC::ChemistryCalc</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>chemistryData.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/chemistry/</path>
    <filename>a00038</filename>
    <includes id="a00039" name="chemistryData.hpp" local="yes" imported="no">chemistryData.hpp</includes>
  </compound>
  <compound kind="file">
    <name>chemistryData.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/chemistry/</path>
    <filename>a00039</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <class kind="class">AFC::ChemistryData</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>chemistryReader.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/chemistry/</path>
    <filename>a00040</filename>
    <includes id="a00041" name="chemistryReader.hpp" local="yes" imported="no">chemistryReader.hpp</includes>
  </compound>
  <compound kind="file">
    <name>chemistryReader.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/chemistry/</path>
    <filename>a00041</filename>
    <includes id="a00066" name="stringManipulator.hpp" local="yes" imported="no">stringManipulator.hpp</includes>
    <includes id="a00039" name="chemistryData.hpp" local="yes" imported="no">chemistryData.hpp</includes>
    <class kind="class">AFC::ChemistryReader</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>constants.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/constants/</path>
    <filename>a00042</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <namespace>AFC</namespace>
    <namespace>AFC::Constants</namespace>
  </compound>
  <compound kind="file">
    <name>interpreter.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/interpreter/</path>
    <filename>a00043</filename>
    <includes id="a00044" name="interpreter.hpp" local="yes" imported="no">interpreter.hpp</includes>
  </compound>
  <compound kind="file">
    <name>interpreter.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/interpreter/</path>
    <filename>a00044</filename>
    <includes id="a00035" name="chemistry.hpp" local="yes" imported="no">chemistry.hpp</includes>
    <includes id="a00078" name="thermo.hpp" local="yes" imported="no">thermo.hpp</includes>
    <includes id="a00086" name="transport.hpp" local="yes" imported="no">transport.hpp</includes>
    <class kind="class">AFC::Interpreter</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>mixtureFraction.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/mixtureFraction/</path>
    <filename>a00045</filename>
    <includes id="a00046" name="mixtureFraction.hpp" local="yes" imported="no">mixtureFraction.hpp</includes>
    <includes id="a00042" name="constants.hpp" local="yes" imported="no">constants.hpp</includes>
  </compound>
  <compound kind="file">
    <name>mixtureFraction.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/mixtureFraction/</path>
    <filename>a00046</filename>
    <includes id="a00035" name="chemistry.hpp" local="yes" imported="no">chemistry.hpp</includes>
    <includes id="a00078" name="thermo.hpp" local="yes" imported="no">thermo.hpp</includes>
    <includes id="a00086" name="transport.hpp" local="yes" imported="no">transport.hpp</includes>
    <includes id="a00062" name="properties.hpp" local="yes" imported="no">properties.hpp</includes>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <class kind="class">AFC::MixtureFraction</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>euler.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/numerics/euler/</path>
    <filename>a00047</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00048" name="euler.hpp" local="yes" imported="no">euler.hpp</includes>
  </compound>
  <compound kind="file">
    <name>euler.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/numerics/euler/</path>
    <filename>a00048</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00070" name="matrix.hpp" local="yes" imported="no">matrix.hpp</includes>
    <includes id="a00050" name="jacobian.hpp" local="yes" imported="no">jacobian.hpp</includes>
    <includes id="a00060" name="stepStatus.hpp" local="yes" imported="no">stepStatus.hpp</includes>
    <class kind="class">AFC::Euler</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>jacobian.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/numerics/jacobian/</path>
    <filename>a00049</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00050" name="jacobian.hpp" local="yes" imported="no">jacobian.hpp</includes>
  </compound>
  <compound kind="file">
    <name>jacobian.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/numerics/jacobian/</path>
    <filename>a00050</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00070" name="matrix.hpp" local="yes" imported="no">matrix.hpp</includes>
    <includes id="a00035" name="chemistry.hpp" local="yes" imported="no">chemistry.hpp</includes>
    <class kind="class">AFC::Jacobian</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>LUDecompose.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/numerics/LUDecompose/</path>
    <filename>a00051</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00052" name="LUDecompose.hpp" local="yes" imported="no">LUDecompose.hpp</includes>
  </compound>
  <compound kind="file">
    <name>LUDecompose.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/numerics/LUDecompose/</path>
    <filename>a00052</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00070" name="matrix.hpp" local="yes" imported="no">matrix.hpp</includes>
    <class kind="class">AFC::LUDecompose</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>numerics.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/numerics/</path>
    <filename>a00053</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00054" name="numerics.hpp" local="yes" imported="no">numerics.hpp</includes>
    <includes id="a00056" name="ODE.hpp" local="yes" imported="no">ODE.hpp</includes>
    <includes id="a00048" name="euler.hpp" local="yes" imported="no">euler.hpp</includes>
  </compound>
  <compound kind="file">
    <name>numerics.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/numerics/</path>
    <filename>a00054</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00046" name="mixtureFraction.hpp" local="yes" imported="no">mixtureFraction.hpp</includes>
    <includes id="a00056" name="ODE.hpp" local="yes" imported="no">ODE.hpp</includes>
    <class kind="class">AFC::Numerics</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>ODE.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/numerics/ODE/</path>
    <filename>a00055</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00056" name="ODE.hpp" local="yes" imported="no">ODE.hpp</includes>
    <includes id="a00060" name="stepStatus.hpp" local="yes" imported="no">stepStatus.hpp</includes>
  </compound>
  <compound kind="file">
    <name>ODE.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/numerics/ODE/</path>
    <filename>a00056</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00060" name="stepStatus.hpp" local="yes" imported="no">stepStatus.hpp</includes>
    <includes id="a00035" name="chemistry.hpp" local="yes" imported="no">chemistry.hpp</includes>
    <includes id="a00058" name="seulex.hpp" local="yes" imported="no">seulex.hpp</includes>
    <class kind="class">AFC::ODE</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>seulex.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/numerics/seulex/</path>
    <filename>a00057</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00058" name="seulex.hpp" local="yes" imported="no">seulex.hpp</includes>
    <member kind="function">
      <type>*jac_</type>
      <name>jacobian</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a848f62287fdfa9151ad9784dcad98fd7</anchor>
      <arglist>(T, p, t, c, dcdt_, dcdc_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>forAll</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ab7102bdc207881d77825cfeec5a45a3f</anchor>
      <arglist>(dcdt_, t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dcdc_</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ade855d5cdd3f77bfa64ae069c039d743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>jacUpdated</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a2bc572d655ed6dc1cebdfccdfbe80ffa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>seulex.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/numerics/seulex/</path>
    <filename>a00058</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00070" name="matrix.hpp" local="yes" imported="no">matrix.hpp</includes>
    <includes id="a00050" name="jacobian.hpp" local="yes" imported="no">jacobian.hpp</includes>
    <includes id="a00060" name="stepStatus.hpp" local="yes" imported="no">stepStatus.hpp</includes>
    <class kind="class">AFC::Seulex</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>stepStatus.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/numerics/stepStatus/</path>
    <filename>a00059</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00060" name="stepStatus.hpp" local="yes" imported="no">stepStatus.hpp</includes>
  </compound>
  <compound kind="file">
    <name>stepStatus.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/numerics/stepStatus/</path>
    <filename>a00060</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <class kind="class">AFC::StepStatus</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>properties.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/properties/</path>
    <filename>a00061</filename>
    <includes id="a00062" name="properties.hpp" local="yes" imported="no">properties.hpp</includes>
    <includes id="a00042" name="constants.hpp" local="yes" imported="no">constants.hpp</includes>
  </compound>
  <compound kind="file">
    <name>properties.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/properties/</path>
    <filename>a00062</filename>
    <includes id="a00064" name="propertiesReader.hpp" local="yes" imported="no">propertiesReader.hpp</includes>
    <includes id="a00078" name="thermo.hpp" local="yes" imported="no">thermo.hpp</includes>
    <includes id="a00035" name="chemistry.hpp" local="yes" imported="no">chemistry.hpp</includes>
    <class kind="class">AFC::Properties</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>propertiesReader.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/properties/</path>
    <filename>a00063</filename>
    <includes id="a00064" name="propertiesReader.hpp" local="yes" imported="no">propertiesReader.hpp</includes>
  </compound>
  <compound kind="file">
    <name>propertiesReader.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/properties/</path>
    <filename>a00064</filename>
    <includes id="a00066" name="stringManipulator.hpp" local="yes" imported="no">stringManipulator.hpp</includes>
    <includes id="a00062" name="properties.hpp" local="yes" imported="no">properties.hpp</includes>
    <class kind="class">AFC::PropertiesReader</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>stringManipulator.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/stringManipulator/</path>
    <filename>a00065</filename>
    <includes id="a00066" name="stringManipulator.hpp" local="yes" imported="no">stringManipulator.hpp</includes>
  </compound>
  <compound kind="file">
    <name>stringManipulator.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/stringManipulator/</path>
    <filename>a00066</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <class kind="class">AFC::StringManipulator</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>dimensions.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/tensors/dimensions/</path>
    <filename>a00067</filename>
    <includes id="a00068" name="dimensions.hpp" local="yes" imported="no">dimensions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>dimensions.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/tensors/dimensions/</path>
    <filename>a00068</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00070" name="matrix.hpp" local="yes" imported="no">matrix.hpp</includes>
    <includes id="a00076" name="vector.hpp" local="yes" imported="no">vector.hpp</includes>
    <class kind="class">AFC::Dimensions</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>matrix.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/tensors/matrix/</path>
    <filename>a00069</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00070" name="matrix.hpp" local="yes" imported="no">matrix.hpp</includes>
  </compound>
  <compound kind="file">
    <name>matrix.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/tensors/matrix/</path>
    <filename>a00070</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00074" name="tensor.hpp" local="yes" imported="no">tensor.hpp</includes>
    <includes id="a00076" name="vector.hpp" local="yes" imported="no">vector.hpp</includes>
    <class kind="class">AFC::Matrix</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>scalar.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/tensors/scalar/</path>
    <filename>a00071</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00072" name="scalar.hpp" local="yes" imported="no">scalar.hpp</includes>
  </compound>
  <compound kind="file">
    <name>scalar.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/tensors/scalar/</path>
    <filename>a00072</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00070" name="matrix.hpp" local="yes" imported="no">matrix.hpp</includes>
    <includes id="a00074" name="tensor.hpp" local="yes" imported="no">tensor.hpp</includes>
    <class kind="class">AFC::Scalar</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>tensor.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/tensors/tensor/</path>
    <filename>a00073</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00074" name="tensor.hpp" local="yes" imported="no">tensor.hpp</includes>
  </compound>
  <compound kind="file">
    <name>tensor.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/tensors/tensor/</path>
    <filename>a00074</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <class kind="class">AFC::Tensor</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>vector.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/tensors/vector/</path>
    <filename>a00075</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00076" name="vector.hpp" local="yes" imported="no">vector.hpp</includes>
  </compound>
  <compound kind="file">
    <name>vector.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/tensors/vector/</path>
    <filename>a00076</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00070" name="matrix.hpp" local="yes" imported="no">matrix.hpp</includes>
    <includes id="a00074" name="tensor.hpp" local="yes" imported="no">tensor.hpp</includes>
    <class kind="class">AFC::Vector</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>thermo.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/thermo/</path>
    <filename>a00077</filename>
    <includes id="a00078" name="thermo.hpp" local="yes" imported="no">thermo.hpp</includes>
    <includes id="a00042" name="constants.hpp" local="yes" imported="no">constants.hpp</includes>
  </compound>
  <compound kind="file">
    <name>thermo.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/thermo/</path>
    <filename>a00078</filename>
    <includes id="a00084" name="thermoReader.hpp" local="yes" imported="no">thermoReader.hpp</includes>
    <includes id="a00082" name="thermoData.hpp" local="yes" imported="no">thermoData.hpp</includes>
    <includes id="a00080" name="thermoCalc.hpp" local="yes" imported="no">thermoCalc.hpp</includes>
    <class kind="class">AFC::Thermo</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>thermoCalc.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/thermo/</path>
    <filename>a00079</filename>
    <includes id="a00080" name="thermoCalc.hpp" local="yes" imported="no">thermoCalc.hpp</includes>
    <includes id="a00042" name="constants.hpp" local="yes" imported="no">constants.hpp</includes>
  </compound>
  <compound kind="file">
    <name>thermoCalc.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/thermo/</path>
    <filename>a00080</filename>
    <includes id="a00082" name="thermoData.hpp" local="yes" imported="no">thermoData.hpp</includes>
    <class kind="class">AFC::ThermoCalc</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>thermoData.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/thermo/</path>
    <filename>a00081</filename>
    <includes id="a00082" name="thermoData.hpp" local="yes" imported="no">thermoData.hpp</includes>
  </compound>
  <compound kind="file">
    <name>thermoData.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/thermo/</path>
    <filename>a00082</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <class kind="class">AFC::ThermoData</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>thermoReader.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/thermo/</path>
    <filename>a00083</filename>
    <includes id="a00084" name="thermoReader.hpp" local="yes" imported="no">thermoReader.hpp</includes>
    <includes id="a00042" name="constants.hpp" local="yes" imported="no">constants.hpp</includes>
  </compound>
  <compound kind="file">
    <name>thermoReader.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/thermo/</path>
    <filename>a00084</filename>
    <includes id="a00066" name="stringManipulator.hpp" local="yes" imported="no">stringManipulator.hpp</includes>
    <includes id="a00082" name="thermoData.hpp" local="yes" imported="no">thermoData.hpp</includes>
    <class kind="class">AFC::ThermoReader</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>transport.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/transport/</path>
    <filename>a00085</filename>
    <includes id="a00086" name="transport.hpp" local="yes" imported="no">transport.hpp</includes>
  </compound>
  <compound kind="file">
    <name>transport.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/transport/</path>
    <filename>a00086</filename>
    <includes id="a00092" name="transportReader.hpp" local="yes" imported="no">transportReader.hpp</includes>
    <includes id="a00090" name="transportData.hpp" local="yes" imported="no">transportData.hpp</includes>
    <includes id="a00088" name="transportCalc.hpp" local="yes" imported="no">transportCalc.hpp</includes>
    <includes id="a00078" name="thermo.hpp" local="yes" imported="no">thermo.hpp</includes>
    <class kind="class">AFC::Transport</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>transportCalc.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/transport/</path>
    <filename>a00087</filename>
    <includes id="a00088" name="transportCalc.hpp" local="yes" imported="no">transportCalc.hpp</includes>
    <includes id="a00042" name="constants.hpp" local="yes" imported="no">constants.hpp</includes>
    <includes id="a00070" name="matrix.hpp" local="yes" imported="no">matrix.hpp</includes>
    <includes id="a00076" name="vector.hpp" local="yes" imported="no">vector.hpp</includes>
    <member kind="variable">
      <type></type>
      <name>return</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a9717e7bbecb906637e86cef6da3d83c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transportCalc.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/transport/</path>
    <filename>a00088</filename>
    <includes id="a00090" name="transportData.hpp" local="yes" imported="no">transportData.hpp</includes>
    <includes id="a00078" name="thermo.hpp" local="yes" imported="no">thermo.hpp</includes>
    <class kind="class">AFC::TransportCalc</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>transportData.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/transport/</path>
    <filename>a00089</filename>
    <includes id="a00090" name="transportData.hpp" local="yes" imported="no">transportData.hpp</includes>
  </compound>
  <compound kind="file">
    <name>transportData.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/transport/</path>
    <filename>a00090</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
    <includes id="a00076" name="vector.hpp" local="yes" imported="no">vector.hpp</includes>
    <class kind="class">AFC::TransportData</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>transportReader.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/transport/</path>
    <filename>a00091</filename>
    <includes id="a00092" name="transportReader.hpp" local="yes" imported="no">transportReader.hpp</includes>
  </compound>
  <compound kind="file">
    <name>transportReader.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/transport/</path>
    <filename>a00092</filename>
    <includes id="a00066" name="stringManipulator.hpp" local="yes" imported="no">stringManipulator.hpp</includes>
    <includes id="a00090" name="transportData.hpp" local="yes" imported="no">transportData.hpp</includes>
    <class kind="class">AFC::TransportReader</class>
    <namespace>AFC</namespace>
  </compound>
  <compound kind="file">
    <name>typedef.cpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/typedef/</path>
    <filename>a00093</filename>
    <includes id="a00094" name="typedef.hpp" local="yes" imported="no">typedef.hpp</includes>
  </compound>
  <compound kind="file">
    <name>typedef.hpp</name>
    <path>/home/shorty/OpenFOAM/development/flameletcreator/src/typedef/</path>
    <filename>a00094</filename>
    <namespace>AFC</namespace>
    <member kind="define">
      <type>#define</type>
      <name>forEach</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>ae2bb6141dfb1db3633365e6e31124c58</anchor>
      <arglist>(Field, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>forAll</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a4a98184dea8846337fb01f181264d193</anchor>
      <arglist>(Field, entry)</arglist>
    </member>
    <member kind="typedef">
      <type>std::ostream</type>
      <name>ostream</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a58341b2ccd51f2085c983d7ee1b94b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::fstream</type>
      <name>fstream</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a8aad01ad76cedf3f4ba60d7a71603ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long double</type>
      <name>scalar</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a4537c8b7c78745b95e6ee2291f1d1b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; bool &gt;</type>
      <name>boolList</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a86f6f5d9a1208a505ba86148f3fc8ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; scalar &gt;</type>
      <name>scalarField</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a8b923e52ceb7071145ce9f5766afdecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; scalar &gt;</type>
      <name>scalarList</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a890f5dad11a4123b6649865a10d7f5f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; scalarField &gt;</type>
      <name>matrix</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a86f0b346368ece36b93413ee4950e2de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>word</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a0ebe792a293e8c717bddf60070c0fe99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; word &gt;</type>
      <name>wordList</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a6a24b83b68b9ffdee59e77f44c463bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;</type>
      <name>intList</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a3b4e6a34886e75fdefe642e4d7190b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; wordList &gt;</type>
      <name>wordMatrix</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>abab26cfb2a2d1adb6b713717941e35d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::map&lt; word, scalar &gt; &gt;</type>
      <name>wordScalarList</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aabd2ae612f3ca50144ad2f265159cba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>string</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aca454f84dd198a937af6499dd758aa3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; string &gt;</type>
      <name>stringList</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ad12b2d65e091b5883d28d8115fb94d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::vector&lt; MixtureFraction &gt; &gt;</type>
      <name>lookUpTable</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a3bcef4b926ffe5b4f482c5a06769a43c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>List</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ac3d98fcb37bbddd2912ab60645c0702b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>vector</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ae04d1c68c250f6c36de3f0dce87363cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>smartPtr</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a5f296ec745fc391a21e1e7cd545ba27b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::map&lt; T, Z &gt;</type>
      <name>map</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a0775ae6bc1ec7ffe2cbfc8a28ebc8754</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; map&lt; T, Z &gt; &gt;</type>
      <name>mapList</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>af9212164dd4744a2ae1784bb46f535b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a9dcac18006ce057b8d78c847174c1362</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ErrorMsg</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a0b364ed48f74db713f4700f084d3efa0</anchor>
      <arglist>(const string, const char *, const unsigned long)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Warning</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a19048bdac4a790558a97ca26ba043514</anchor>
      <arglist>(const string, const char *, const unsigned long)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Header</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a574c52e15c08710241519d1da9d1a214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Footer</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a8621ddf4e0d8781ed124951ca20fb3fd</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>toStr</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aeb005eead6363ab04f3b9b8a46c493e6</anchor>
      <arglist>(const T &amp;tmp)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ac8a859be1287fbeda5e0c77336f0d02b</anchor>
      <arglist>(const T &amp;tmp1, const T &amp;tmp2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a1c5c5cea436f4ae35fdd2f5f3db85b30</anchor>
      <arglist>(const T &amp;tmp1, const T &amp;tmp2)</arglist>
    </member>
    <member kind="variable">
      <type>std::ostream &amp;</type>
      <name>Info</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>afa32e7b53fbdecf84b1be4d1fca31d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::ostream &amp;</type>
      <name>Error</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a441e4029eba329834dc60d8e15ebd2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::basic_ostream&lt; char &gt; &amp;(&amp;)</type>
      <name>endl</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ae4664256aaf88fe0568825912c2633c4</anchor>
      <arglist>(std::basic_ostream&lt; char &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::Chemistry</name>
    <filename>a00001.html</filename>
    <member kind="function">
      <type></type>
      <name>Chemistry</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a6221e9aade0ada6731982be34c81f0c5</anchor>
      <arglist>(const string &amp;, const Thermo &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Chemistry</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a1263c94d6659727c82ed1ec001163952</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readChemistry</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a9eec589071bbb20937da6a120cf0b19d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>thermo</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a181f7dc0e468c8fdd2878d2d64259a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>calculateOmega</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>adcb06857e2eb2f23417f7fe47782a36d</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const map&lt; word, scalar &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>calculateOmega</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a6c384cc33bf6a22175ae283cbe155d33</anchor>
      <arglist>(const scalar &amp;, const map&lt; word, scalar &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>kf</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a8c1632448fd3918461d65343502121f5</anchor>
      <arglist>(const int, const scalar &amp;, const bool LOW=false) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>kb</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>aec75cd6466c58bd79ad8f3cfc6c26449</anchor>
      <arglist>(const int, const scalar &amp;, const bool LOW=false) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>keq</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a421902e22bb758387b252cd8811b1b44</anchor>
      <arglist>(const int, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Fcent</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a307574c6cfc55876a31de9ba7a90f22a</anchor>
      <arglist>(const int, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Flog</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a5126ed9bf517a1376d5497ae35608eea</anchor>
      <arglist>(const int, const scalar &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>calculatek</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>ad3816400492c6e52041378022b31ed8e</anchor>
      <arglist>(const scalarField &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateKb</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a535d242c5e053a1384d181805b2fad6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateM</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a152c4d6005e18486bfd9bec7f49e55e7</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createSpeciesInReaction</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a29ef56ea1328860400238b1f810b95c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertReacNoForSpecies</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a54c447e20de2a4a1fc1315502a86a1f6</anchor>
      <arglist>(const int, const int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BR</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a2b06ce6a5fe9c4e1aa43b21ad4e7fda7</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TBR</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a219304df65267ef0d5ea09d69d5877d1</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LOW</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>acca13ea634767b7e7b5b9e346e6c05f8</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TROE</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>aecf29d694e4e8419599d50085f12943f</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SRI</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a8786150d047e9d348e976ce4de0ef04b</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ENHANCED</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a1d523572fd45d35715cdb9b90f4143a5</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>species</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a1b2ea072954396af4e5d695971aae3e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>elements</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a75deea8eecebd1c89777ae98bf4b70ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nDublicated</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a0e479575e5b19748620553e401e8f1f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nReac</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a9909fb474cbf989e96485c682c7aed4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>elementarReaction</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a6d2b944fe2882491fc388e39f2bd8b3a</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; string &gt;</type>
      <name>elementarReaction</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>aa42443383bb6f17c5187991173fee3f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>enhancedFactors</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>af17865defac43426b68a32ba1da41d69</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>enhancedSpecies</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a4fa2cdf62279976301fd25455a544dd7</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>dH</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a7d70234343e2b2ac5c42b35b89f3fb7f</anchor>
      <arglist>(const int, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>dG</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a14cbe25a3dbe44401570c1455d8b886b</anchor>
      <arglist>(const int, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>dS</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>ace1559913a26bc3323e29e580e6ecbb7</anchor>
      <arglist>(const int, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; int &gt;</type>
      <name>reacNumbers</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a1c921e05ef8a99af2cb620eff938d4bd</anchor>
      <arglist>(const word) const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>speciesInReaction</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>ae85a269e819054e514fa7727ef158a66</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>speciesProducts</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a6cd3b20bc197549bf82ec9e03a448108</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>speciesEducts</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a047abce107d467dee62755174107c1c5</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, int &gt;</type>
      <name>nuProducts</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a5b8a4681145cf684ee31e8da5f7699fc</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, int &gt;</type>
      <name>nuEducts</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a9c9d5c27360a64968e8d38300cab638d</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>summary</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>ae4cd32d2be2fc777e2121775daf9df4e</anchor>
      <arglist>(ostream &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>chemicalTable</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a50ff8bb6f887b11a1b99b01771adcf06</anchor>
      <arglist>(ostream &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildTablekf</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a93c58213a7ad5e30ae1ac2ac6d114b31</anchor>
      <arglist>(const int, ostream &amp;, const bool LOW=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildTROETable</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a8dc87fb2ed0f0c4b41c0d03a16ce61c4</anchor>
      <arglist>(const int, ostream &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::ChemistryCalc</name>
    <filename>a00002.html</filename>
    <member kind="function">
      <type></type>
      <name>ChemistryCalc</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ac673cb411d6075741d8f6f758d87f62e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChemistryCalc</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a7f97cafbdefeaa44be48c2b243892565</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>k</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab79573cee8b96dec35a533387448f611</anchor>
      <arglist>(const ChemistryData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculatekfkb</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3f1c1f1548838e59aa6d0c0357716775</anchor>
      <arglist>(const int, const scalar &amp;, const map&lt; word, scalar &gt; &amp;, const Thermo &amp;, ChemistryData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>kf</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab1d9ef78f0d137bd0255e4ecc5c28eb4</anchor>
      <arglist>(const int, const scalar &amp;, const ChemistryData &amp;, const bool LOW=false) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>kb</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a92922b6c64b15fe8521f9ecfbfe5ac61</anchor>
      <arglist>(const int, const scalar &amp;, const ChemistryData &amp;, const Thermo &amp;, const bool LOW=false) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>keq</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab3eb7fb86bd76db659a20373645c3ec8</anchor>
      <arglist>(const int, const scalar &amp;, const ChemistryData &amp;, const Thermo &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>arrhenius</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aeabaa3c1e16dfb648d7c73cd31982265</anchor>
      <arglist>(const scalar &amp;, const scalar &amp;, const scalar &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Fcent</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab41e9031ea435a72c6244e0615d4152d</anchor>
      <arglist>(const int, const scalar &amp;, const ChemistryData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Flog</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a606118ea732b7495d2905388d176d627</anchor>
      <arglist>(const int, const scalar &amp;, const scalar &amp;, const ChemistryData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>calculateOmega</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae3d9afba8d91bae1b2cd873f54f41c3a</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const map&lt; word, scalar &gt; &amp;, const Thermo &amp;, const ChemistryData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateM</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a423c32c5e5780b8d510959965b18102d</anchor>
      <arglist>(const int, const map&lt; word, scalar &gt; &amp;, ChemistryData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>thirdBodyReaction</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a5f78f60ac94c207b0dca3523ab69b75b</anchor>
      <arglist>(const int, const ChemistryData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>dH</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>af0abfdeb8638a27942feff6a34560586</anchor>
      <arglist>(const int, const scalar &amp;, const ChemistryData &amp;, const Thermo &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>dG</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a0a4fc34e4c9dc639b336951da522057a</anchor>
      <arglist>(const int, const scalar &amp;, const ChemistryData &amp;, const Thermo &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>dS</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a5b3c2632c836538f8ea220c6150cf838</anchor>
      <arglist>(const int, const scalar &amp;, const ChemistryData &amp;, const Thermo &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::ChemistryData</name>
    <filename>a00003.html</filename>
    <member kind="function">
      <type></type>
      <name>ChemistryData</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ac72d447f52bf1bf22cf77ed1f4a590d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChemistryData</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a1597577e7daf3a95ee938d8f50022423</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThermo</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a3143f6355049752622f1d38dbc7c6bea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>thermo</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a181f7dc0e468c8fdd2878d2d64259a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elements</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a4f74e9e77ba632f7b8443ba0a8532151</anchor>
      <arglist>(const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>species</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aea92fc6425f4200bd775f54bce932a16</anchor>
      <arglist>(const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>educt</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aec29ea8eafcf961bb02fa8f879d8746d</anchor>
      <arglist>(const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>product</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ac36feb21d74ef135e2a973159de36759</anchor>
      <arglist>(const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nuEducts</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aee16257a27924a710bf1f0230c1c9f5e</anchor>
      <arglist>(const word, const int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nuProducts</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>adf4400ab5cde9613520d3307408d12bf</anchor>
      <arglist>(const word, const int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementarReaction</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a657b3eae266000066d9d54e3ac068ffa</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arrheniusCoeffs</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>abb32feca03a8e96c195e2dadeb7865d7</anchor>
      <arglist>(const scalar &amp;, const scalar &amp;, const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LOWCoeffs</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a28e78696e27fab52fd24d02f1048dce0</anchor>
      <arglist>(const scalar &amp;, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TROECoeffs</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>afe0d723a98189219f15ce662aba0135d</anchor>
      <arglist>(const scalar &amp;, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SRICoeffs</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a1e5e01f44f4ea1a3d4028956960771ba</anchor>
      <arglist>(const scalar &amp;, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ENHANCEDCoeffs</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ac880f7ca8239ac55cf7ab6b28b345163</anchor>
      <arglist>(const word &amp;, const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrementDuplicated</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a11143620c3d4c3006e879eaeaa46f4e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrementReac</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a6507ec9b8652c4ca7230e85e433a98b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>speciesInReaction</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>abf3ca58ab86c803593a23c53816ac228</anchor>
      <arglist>(const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrementMatrixesVectors</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a1845a52936b29e0721c939b6b3715bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setM</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a25b2f8264daffa76a711cd000473f5e8</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BR</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a1b7e6cf6126bc86f30ac9d20108dbd64</anchor>
      <arglist>(const bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TBR</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ac3f453dd9fa7862329f676d6bf8d93b2</anchor>
      <arglist>(const bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LOW</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a3949d07e694d694d5058529f02b444f1</anchor>
      <arglist>(const bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TROE</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a84bceb3d07068aa649da656d04c6ff44</anchor>
      <arglist>(const bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SRI</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af42b7e78e60c821a92fba93ab0b4e599</anchor>
      <arglist>(const bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ENHANCE</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a63965001b2d522943f61c5bee7554f5b</anchor>
      <arglist>(const bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReacNumbers</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a5435a3fd7f9f0c044794649edd5d0016</anchor>
      <arglist>(const word &amp;, const int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forwardReactionOrder</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a7c6ad034077a21a3441826b29a573e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backwardReactionOrder</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>acb0837a89564edcc3f15bb87a919c054</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateKf</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a5df6c952f16ffb1a7418a76573f7e76f</anchor>
      <arglist>(const int, const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateKb</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a5ff992114ad89e5777188560de86fb32</anchor>
      <arglist>(const int, const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateKc</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af7e35fd5804a8383065615854051c10c</anchor>
      <arglist>(const int, const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateOmega</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a0bc1af0c21a64193a3e43db667995691</anchor>
      <arglist>(const int, const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateOmega</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>adbffa7b445a461122e4d3bd20382ac6c</anchor>
      <arglist>(const scalarField &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateGlobalReactionOrder</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ae955a16e8d319ebbcf62e85a24395338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BR</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a2b06ce6a5fe9c4e1aa43b21ad4e7fda7</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BR</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a17c94c9702f9b6e1b27f87a91d35fad8</anchor>
      <arglist>(const int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TBR</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a219304df65267ef0d5ea09d69d5877d1</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>LOW</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>acca13ea634767b7e7b5b9e346e6c05f8</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>TROE</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aecf29d694e4e8419599d50085f12943f</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>SRI</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a8786150d047e9d348e976ce4de0ef04b</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ENHANCED</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a1d523572fd45d35715cdb9b90f4143a5</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>M</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aaa1d4750652216d1242277c2d4917eaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>dS</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ada0fcc556841f0c0049247103a7026c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>dG</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a8103ace11da41d30b804ed49f8083a73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>elements</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a75deea8eecebd1c89777ae98bf4b70ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>species</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a1b2ea072954396af4e5d695971aae3e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>educts</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ada9940c1a06ebd6c601deba4644302c5</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>products</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a3334366132ad506d832d655e6fb67fa0</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nDublicated</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a0e479575e5b19748620553e401e8f1f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nReac</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a9909fb474cbf989e96485c682c7aed4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>elementarReaction</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aa42443383bb6f17c5187991173fee3f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>elementarReaction</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a6d2b944fe2882491fc388e39f2bd8b3a</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; int &gt;</type>
      <name>reacNumbers</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>add3a9e951aaa102d8e7a53405979c39a</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>wordMatrix</type>
      <name>speciesInReaction</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a5b264d3ff95a50d1cd30d26d971a6cfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>speciesInReaction</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ae85a269e819054e514fa7727ef158a66</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; word &gt;</type>
      <name>speciesProducts</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a6cd3b20bc197549bf82ec9e03a448108</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; word &gt;</type>
      <name>speciesEducts</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a047abce107d467dee62755174107c1c5</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, int &gt;</type>
      <name>nuEducts</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a9c9d5c27360a64968e8d38300cab638d</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, int &gt;</type>
      <name>nuProducts</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a5b8a4681145cf684ee31e8da5f7699fc</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>exponent</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aaf800c277c27705142fa94a29a01a245</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalarList</type>
      <name>arrheniusCoeffs</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aa009231a0c00dd1627c68287579b3e01</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalarList</type>
      <name>LOWCoeffs</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>abbfc636229e200b765855c32f94b510f</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalarList</type>
      <name>TROECoeffs</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a221c98fe02593f108e41164b5bc3be3a</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalarList</type>
      <name>SRICoeffs</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a02f59649522c275cafff5407db61447c</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>ENHANCEDCoeffs</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>acf2a47f40d9e7f439dd7aa31bb9f9ff0</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>kf</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a956c1017063b5fa4426eef600c18ac4b</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalarList</type>
      <name>kf</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a3b3bcc12f5abdda133dd1797c8f6e40e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>kb</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a2b49c20f43ef5771f24a5cfbf0a3fa0e</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalarList</type>
      <name>kb</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af3547a975b8463e22378e0af2a42db73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Kc</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a988bcc950fe7aaeda0cc72ae5f4e7175</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalarList</type>
      <name>Kc</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af295ade8b17eb623bf5bcf5b2634cdb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>omega</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a849d7b20e804aeb1f7ae8ca85b3ea1bd</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>omega</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a06096a4cdadf0a5e0591313bbf7970b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>nuEduc</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af93457e4430a5f4fe339b93fe17ac9b5</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>forwardReactionOrder</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ab14a77846ac53a4c23c7522c0a277968</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>backwardReactionOrder</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a44c201f4719c7b8a3e0bcf42cf1e584c</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>globalReactionOrder</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a7b01bd187dd588a5a569c725de742f82</anchor>
      <arglist>(const int) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::ChemistryReader</name>
    <filename>a00004.html</filename>
    <base>AFC::StringManipulator</base>
    <member kind="function">
      <type></type>
      <name>ChemistryReader</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>aba4411416e6f913318bfda0bf1996ed2</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChemistryReader</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a36b425ec1019000e9eef5ed6f6efbc73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>aa3a2e133dbfc6a5a5eacdf14753bf473</anchor>
      <arglist>(ChemistryData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readElementBlock</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ab1bf9513f8bd2d8244194db0bd2dc82c</anchor>
      <arglist>(const stringList &amp;, ChemistryData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readSpeciesBlock</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a97c6b082ba58bd89e77bcfe9e3a9267c</anchor>
      <arglist>(const stringList &amp;, ChemistryData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readThermoBlock</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a538e9e41adaaaa8db649f53d0062b50a</anchor>
      <arglist>(const stringList &amp;, ChemistryData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readReactionBlock</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ac961e9680bbb51653e0c520f131a707e</anchor>
      <arglist>(const stringList &amp;, ChemistryData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findKeyword</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a908dcb001717c8748dd5bb98b6868794</anchor>
      <arglist>(int &amp;, unsigned int &amp;, const stringList &amp;, const string)</arglist>
    </member>
    <member kind="function">
      <type>stringList</type>
      <name>extractData</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a3a1f06b8f39a29f9b7ca1adccdcf3f67</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeReaction</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a047d3b9283273e1826b7d71e2aec3d32</anchor>
      <arglist>(const string &amp;, ChemistryData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LOWCoeffs</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a8f541c084ac6eaf339caa8dd7bd6ebed</anchor>
      <arglist>(const string &amp;, const unsigned int, ChemistryData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TROECoeffs</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>aa701f85982eaa6c91981dac73324ffd5</anchor>
      <arglist>(const string &amp;, const unsigned int, ChemistryData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SRICoeffs</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>af98966c64f8e24918cd1ff10fa69d5c9</anchor>
      <arglist>(const string &amp;, const unsigned int, ChemistryData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enhanceFactors</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a8255b10db192ea6ef0057b06a9e1335c</anchor>
      <arglist>(const string &amp;, ChemistryData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzeReacSite</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a970ae41d67d416371a18e22a94731954</anchor>
      <arglist>(const word &amp;, const word, ChemistryData &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::Constants</name>
    <filename>a00005.html</filename>
    <member kind="variable">
      <type>const map&lt; word, scalar &gt;</type>
      <name>AW</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a8eebdacb291ad7e41a42c100f3b5afb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr scalar</type>
      <name>calToJoule</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a8a6f9c77b899d2186370927b03ec5879</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr scalar</type>
      <name>jouleToCal</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a2ccec7a84921906eaca2b1033504e25a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr scalar</type>
      <name>R</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a7e3310b2d74fe5c3da34d4b177288074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr scalar</type>
      <name>Rcal</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a39ccc77589de21b1cacb20b04e610a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr scalar</type>
      <name>Rerg</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aa0e54555afc46d17b1866301b68e6063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr scalar</type>
      <name>kB</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a79057c297692d1f33d38c5d903998753</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr scalar</type>
      <name>N_A</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>af61e7f2124875f4f882c013b26eada2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr scalar</type>
      <name>p0</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aee741607549fd7e29dd7c0c1536c2b76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::Dimensions</name>
    <filename>a00006.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Dimensions</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>ae5fe77604859dc745b6924fa684c8323</anchor>
      <arglist>(size_t, size_t, size_t, size_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dimensions</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a6630c7108371d8d2acb71bcc9d9311fa</anchor>
      <arglist>(const scalarField &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dimensions</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a26a283b23754eafd626512e56b3c1494</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::Euler</name>
    <filename>a00007.html</filename>
    <member kind="function">
      <type></type>
      <name>Euler</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ad24b2fd8c4c499d1fe77baac4dd9abbd</anchor>
      <arglist>(const size_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Euler</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a28fa60483b97cd53ce2f6566616fd977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>solve</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a5332e5399c8407281bf6f04b303f8edb</anchor>
      <arglist>(const scalar, const scalar, const map&lt; word, scalar &gt; &amp;, const map&lt; word, scalar &gt; &amp;, map&lt; word, scalar &gt; &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::Interpreter</name>
    <filename>a00008.html</filename>
    <member kind="function">
      <type></type>
      <name>Interpreter</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a85bb850bc91d0679b1691bec279ab68c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Interpreter</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a2ca9f60535018c7164d95f0f4d8e8b70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>analyze</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>af143f6a1d3ca3dcd2a8a689f2c2cb068</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyze</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6bbc257476031b8e14eb7bfa67b12447</anchor>
      <arglist>(const bool &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>summary</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5a38dbe693ab8aab521ae29b92d68757</anchor>
      <arglist>(const Chemistry &amp;, const Thermo &amp;, const Transport &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::Jacobian</name>
    <filename>a00009.html</filename>
    <member kind="function">
      <type></type>
      <name>Jacobian</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a261b6e161f55788de79739a139bd2523</anchor>
      <arglist>(const Chemistry &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Jacobian</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a0f11addaafae2f61d986477e183a4d0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobian</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a69fac744cd34b41e1e4ccb3f39606660</anchor>
      <arglist>(const scalar, const scalar, const scalar, const map&lt; word, scalar &gt; &amp;, map&lt; word, scalar &gt; &amp;, Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>derivationOfReaction</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ace8ad21ea51313ed3c68a82e80d0df01</anchor>
      <arglist>(const word, const word, const wordList &amp;, const wordList &amp;, const map&lt; word, int &gt; &amp;, const map&lt; word, int &gt; &amp;, const scalar, const scalar, const map&lt; word, scalar &gt; &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::LUDecompose</name>
    <filename>a00010.html</filename>
    <member kind="function">
      <type></type>
      <name>LUDecompose</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a5a26ac6be28cf7c6ef9578918a484ec9</anchor>
      <arglist>(Matrix &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LUDecompose</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a1e263885e3843109b03bd597a841f975</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ab2b2221e1152c35328e43ea4565f7c8e</anchor>
      <arglist>(Vector &amp;, Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>improveSolution</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a364dd79ab8ef036bdfc12f6fbee4ce75</anchor>
      <arglist>(Vector &amp;, Vector &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::Matrix</name>
    <filename>a00011.html</filename>
    <base>AFC::Tensor</base>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a3aede62f513da27e6f61ae7a972b4f96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a59a1977095d8732d7895b7088f3249dd</anchor>
      <arglist>(const size_t, const size_t, const scalar value=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Matrix</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a2249c859d9c3503ec00d3a20fe963842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator*</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>af4434d30bb4c838022582337bab3232a</anchor>
      <arglist>(const Matrix &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator*</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a5be644b85fdd0b5850e5618213ffb7fe</anchor>
      <arglist>(const Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>T</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>af4e1ac28218c8a97d0da2002125f86bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>inverse</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a2c724c43bfc12f8af87583e983cb143d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>I</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a189c0538d6ac78dd213e8ea37b6b840e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>I</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>adf333b2af61039f9986c49f9b1a22bd4</anchor>
      <arglist>(const size_t) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>LT</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a6706cc4bfcf589c6482b490be0bb4bc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>UT</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a4550fa868f5c21fc2c8c0c5bf593d929</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LU</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a9d42bf852828185df2831e4874f6d94a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::MixtureFraction</name>
    <filename>a00012.html</filename>
    <member kind="function">
      <type></type>
      <name>MixtureFraction</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a1635f263c3e2c6106a5caf9b179e3fac</anchor>
      <arglist>(Chemistry &amp;, const Thermo &amp;, const Transport &amp;, const Properties &amp;, const scalar &amp;, const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MixtureFraction</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a5b6c196aee43209e6ebb9b3a28a31582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcRhoOxidizer</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a23db152076fa5c9bf30dfa65c4be7434</anchor>
      <arglist>(const Properties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateMeanMW</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a09f050c21aafd3413def51ec28c28f05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateMeanCp</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a83e2a7e420ecfb83fda1aa358bae4855</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateMeanH</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a6a227fe500eccaf10d39c7e05c00e382</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateMeanS</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>aafbd86bcd2404cef44c885cb0af77960</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateMeanG</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>af654405758ee6b9ed8b12043d62856ab</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateMeanG</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a9423d96900c834c626481fe62075f1f2</anchor>
      <arglist>(const scalar &amp;, const scalar &amp;, const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>calculateOmega</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a4c68564950d51d8447bdaa22020bc813</anchor>
      <arglist>(const word &amp;, const int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateHf</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ae5aa46cb34d93e46292efab396af1b2b</anchor>
      <arglist>(const word &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservation</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a5a286b1fa12db08c75c3acb6f8ada7e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservation</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a70717e76c46a924857bf938adabd1480</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>Yconservation</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a64db217cfdfb46eb79ae57b0723ad548</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Yconservation</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a937c199425c37b9fb872ce0e1ad4a5a9</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateY</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ac4fe4bdf66b2ff55cd8926e5014a7027</anchor>
      <arglist>(const word &amp;, const scalarField &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateY</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>accecf89a8a39975e50818b0e2b250452</anchor>
      <arglist>(const map&lt; word, scalar &gt; &amp;, const int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateX</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ae8898b3d8525d4767d033c8babed1dc3</anchor>
      <arglist>(const map&lt; word, scalar &gt; &amp;, const int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateC</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a4751ef60612b09d23cd0e3307c5d67fb</anchor>
      <arglist>(const map&lt; word, scalar &gt; &amp;, const int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateY</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ae92a1ec508600efb94fdbf9aa38086ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateX</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a16ce5b04edb6570f729367638bfcd437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateC</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a524ca3201b5623e9804a75e838283b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFields</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>aa1ae41ebd7f9d7d95ff41f69045699d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatek</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ad6c8ac2bb43127c4d5cdbf4cc71e58e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateT</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a07b0de29a37a7be2e6664fab3deb1471</anchor>
      <arglist>(const scalarField &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRho</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a4c15959f66128251dd05e643814ed521</anchor>
      <arglist>(const word &amp;method=&quot;mass&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCp</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a8aa880c8469d0673ac259045dddbf3de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updatedMeanMW</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a67bcbad048f4e98eb32be0e65db0f128</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatedMeanMW</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a785d7053d7bd4b3755b4aaf2ac6db4f8</anchor>
      <arglist>(const bool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updatedMeanRho</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a93b5634a7a3d79edc579aaded9aacfb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatedMeanRho</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a0a7436c6a1067afb6cffe3c5d18cef83</anchor>
      <arglist>(const bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updatedFields</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a6d251991b2f41c904ea138d0ad4e8fbf</anchor>
      <arglist>(const bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateOmega</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>adae416af3ec21aba36033997e3da4038</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateOmega</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a7bd8d5cbebee0dec25d18221a6cf4152</anchor>
      <arglist>(const int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateOmega</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>aa14911e5840b26355fa8a6229d890a9b</anchor>
      <arglist>(const int, const word)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateOmega</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a13d43e5df6ff6a2520b301c3f4ec9322</anchor>
      <arglist>(const word)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>YtoX</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ac916c3521e2d5d161043be3fe914106c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>XtoY</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>af7ec20d274554f51f53bba45c99f9986</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>YtoC</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ac1887f07df3321d4c83150c9c015bedb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>XtoC</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>adfdf363c31023602bb0e8d3ec0424f39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CtoY</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a6314df16d7618e5aa5666164958144f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CtoX</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a04a8c89ea27a1adb369f18fbfd372ee9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rhoX</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>af0aef39ea6221ec68d2e7e5260c4ff72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rhoY</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a742fe4c61b7e128733f788192bab3056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rhoC</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ab7c6c62650daa14ddf8693651410967e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>species</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a1b2ea072954396af4e5d695971aae3e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>speciesOxidizer</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>af30e994b7be06bb624f7596207e2a9d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>speciesFuel</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ad37009fa9582449933566d597832730e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nZPoints</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a26cb0f85e951d356b75f00b15c263ba2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Z</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a76a49e0cec407c7d7ae992d60af8284d</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>T</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>aba0021b899d17ce4faa821124bedf27b</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>X</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a7239e5aec71f0dcd1472b82c98118fe1</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>Y</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>af492bf0a85bb50cb9ec9c0177794b094</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>C</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a55f72ddfbdcb9bd13c9d3783c6931789</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>omega</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a39855841b54a16076078d764bec98d23</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>sDR</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a7d5d9e05c91315854e7c2e42a5093732</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>Z</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ac5284fadab0a2e34edb63295d1ebc091</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>rho</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a8323ea80257ae1cac08d01d9d93f941b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>T</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>acc08f29bc442515306f9e48e865af71a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>p</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ae0964e427c364d326538a644b2a23877</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; map&lt; word, scalar &gt; &gt;</type>
      <name>X</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a80af4ed0e55efbffc6a12d61f677c990</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; map&lt; word, scalar &gt; &gt;</type>
      <name>Y</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a18dad638e115b54361051a211832c49c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; map&lt; word, scalar &gt; &gt;</type>
      <name>C</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ae90dc1e6aba21c0eea1dbad44a53028b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; map&lt; word, scalar &gt; &gt;</type>
      <name>omega</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a7ca8877e85d14ff83212f8c8adf786d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>X</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a532a5450d7420cc1c06058d9d6d0c527</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>Y</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a14abc2ad36b38faac98baf8a47dc9379</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>C</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>adcccc7342ef94d0f31c1a9a6d657cc8c</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>omega</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a43b4452252b72f14fc9ada921286f601</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalarField &gt;</type>
      <name>YField</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>afb4a3cf172bbb5e52bce59843ef65e79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalarField &gt;</type>
      <name>CField</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>acd415e200184f493bcaf77abcdac5e63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>CField</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ab9bce480631641151982ae7e1ecdee12</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalarField &gt;</type>
      <name>omegaField</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>adc8211b0720df2c4bcccba5a628466e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>omegaField</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>aa8080b0da1950ef7af2c0be36bef5560</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; int &gt;</type>
      <name>reacNumbers</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a1c921e05ef8a99af2cb620eff938d4bd</anchor>
      <arglist>(const word) const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>speciesInReaction</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ae85a269e819054e514fa7727ef158a66</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>speciesProducts</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a6cd3b20bc197549bf82ec9e03a448108</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>speciesEducts</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a047abce107d467dee62755174107c1c5</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, int &gt;</type>
      <name>nuProducts</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a5b8a4681145cf684ee31e8da5f7699fc</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, int &gt;</type>
      <name>nuEducts</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a9c9d5c27360a64968e8d38300cab638d</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>elementarReaction</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a6d2b944fe2882491fc388e39f2bd8b3a</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>Chemistry</type>
      <name>chemistry</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ac3221b0ab1aa5a6faa8f1011eb403366</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Thermo</type>
      <name>thermo</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a45474d7990614fb756146ab49f7f182a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>kf</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a169765837aff39852563cce5d7414ddc</anchor>
      <arglist>(const int, const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>kb</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ad5d376d212626502974c225bb8c6f31c</anchor>
      <arglist>(const int, const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>MW</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a03012f2ad845c896086f5f4de79bea3d</anchor>
      <arglist>(const word) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a9ba943a3e5d19bd6cbbeecedbd8aa972</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::Numerics</name>
    <filename>a00013.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Numerics</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a72cbf900c146389ff653f32bff216d0c</anchor>
      <arglist>(const Chemistry &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Numerics</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a1977133a29a6a440d2fa34f6b1946319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveForInitialSolution</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a0b3fa240ecc3bc7d3cd623db658ff60f</anchor>
      <arglist>(MixtureFraction &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveAdiabaticFlamelet</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8cb82298751368984147f689454ebb3d</anchor>
      <arglist>(MixtureFraction &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>solveChemistry</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a71d13e10b677596241ce8fd6f16e02b9</anchor>
      <arglist>(const scalar, MixtureFraction &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>FDMLapacian2ndOrder</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a74ada5de0f464cb0129cd0c027c0ff63</anchor>
      <arglist>(const scalar &amp;, const scalar &amp;, const scalar &amp;, const scalar &amp;, const scalar &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveFlamelet</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a64d9d4bf5587919f3fb6bef252c5dddf</anchor>
      <arglist>(MixtureFraction &amp;, const scalar &amp;, const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveMatrix</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a8a8373db0398f462b3a2aa33b8531f21</anchor>
      <arglist>(matrix &amp;, scalarField &amp;, scalarField &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>residual</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ae8321dcd5f8500625dad93b81b9e16eb</anchor>
      <arglist>(const scalarField &amp;, const scalarField &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>max</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a76f9bfcac55739203b181cd684d2f01d</anchor>
      <arglist>(const scalarField &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::ODE</name>
    <filename>a00014.html</filename>
    <templarg>Type</templarg>
    <base>AFC::StepStatus</base>
    <member kind="function">
      <type></type>
      <name>ODE</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a62c62408d073d652f08a921ce7aef99b</anchor>
      <arglist>(const Chemistry &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ODE</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a297dfb5b832e89784e6ee96159276359</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>derivative</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a4067358e81694a66d34471d7af48d3c4</anchor>
      <arglist>(const scalar, const scalar, const map&lt; word, scalar &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a79ae9f1c8bfd15f32a17865cc560335e</anchor>
      <arglist>(const scalar, const scalar, map&lt; word, scalar &gt; &amp;, const scalar, scalar &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::Properties</name>
    <filename>a00015.html</filename>
    <member kind="function">
      <type></type>
      <name>Properties</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a380b3450f4d0eb4360b97a1fa052fd05</anchor>
      <arglist>(const string &amp;, Thermo &amp;, const Chemistry &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Properties</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a7bcc984f39c6e8be064ed7d42d592de7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertMFPoints</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ae6f125d52c1ac37379ff374cb2c45499</anchor>
      <arglist>(const int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertVMFPoints</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a56adc3485c55ce6b824ece128a37bf20</anchor>
      <arglist>(const int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEnthalpyDefects</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a55f9086d3503f0f62834d26be5c1580b</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertScalarDissipationRates</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a144d7839da3c193dc6578d9ec8ec451c</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertTemperatureOxidizer</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a9b3a8641cccc772919d121a332c280ea</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertTemperatureFuel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aed92bfcdf5954b8e7a4b0d735e6ed29b</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertCompositionOxidizerMol</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a24ca1d21017c41b3d13b009b046560b5</anchor>
      <arglist>(const word &amp;, const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertCompositionOxidizerMass</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a66a897b01c3a9c2050eba0738ed2df4a</anchor>
      <arglist>(const word &amp;, const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertCompositionFuelMol</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab884ef187fd5c99428e806201fc4032f</anchor>
      <arglist>(const word &amp;, const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertCompositionFuelMass</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ad270c7e012728a3c2b2d1ad66d145ebf</anchor>
      <arglist>(const word &amp;, const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertRunTime</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a6d14e126a1a8f804358e51ff7188191a</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertWriteControl</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a09dfa10423e24d305905b6140595a72a</anchor>
      <arglist>(const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertWriteControlInterval</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a8e1418f348a4b7da87ae7c66aec8d5f1</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertWriteControlTime</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1632fc828960fdb8edf2040aba970aa8</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertDeltat</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aef31aaab4c5b46b8e2f882bf9092cf4f</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertPressure</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab9fdd316414fe37295cb804bcf47f48a</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inputMol</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>afce26cc898f9f6cd2c63689565219193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inputMass</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aebd39c665e27952f4a2ec14c014bd532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertInterpreter</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1c3dd6b006728de56597208ef45c02c1</anchor>
      <arglist>(const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fuelSpecies</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab28473324ab5faa46eb437758203278a</anchor>
      <arglist>(const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oxidizerSpecies</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aea3c77ab4b0ae291fc3168c3850f6747</anchor>
      <arglist>(const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inertSpecies</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aaaecd14bcf8d99a7857458d51801067b</anchor>
      <arglist>(const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialBoundary</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a4e424086b1437cd182a8e734d80ee8bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a83f8adca24e250bfb5c9a90a35503ae9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertFractions</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a6eed7603fa41504ed6a0492b54078f6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>XtoY</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af7ec20d274554f51f53bba45c99f9986</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateCurrentTime</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a0e59d26d2646397b89f10c9358d1d696</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>runTime</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aa8cedc5c6a7205779246ea06c4f7ba06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>deltat</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aa0cb88a2877066ddee1a1e5dd31a528e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>currentTime</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a7590260ebf29374c8268107f2b312d6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>write</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ad5339133d9a32c41c17ecef7a900e9a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>fuel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ad5fe634bd4590cff70d4d046839888bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>oxidizer</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a06d6ffe65a8ebcbca11b0a98f3315cd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>inert</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a91fc5b0dec25120270d1c93ab49e5102</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>speciesOxidizer</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af30e994b7be06bb624f7596207e2a9d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>oxidizerX</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a9c7e5c646db9dba52013bbb2e689c653</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>oxidizerY</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a6ab4c60d54ac1005f328b0469095b747</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>oxidizerZj</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aafa1190ae0b7d0497b199716c71066ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>oxidizerX</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>afc49d42d444997289e2dd4d1fc03995b</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>oxidizerY</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a36db21776898d2758e8c3fd0d04482b8</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>speciesFuel</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ad37009fa9582449933566d597832730e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>fuelX</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a0550ad6ab491b346e371f99b5d9b930d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>fuelY</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af0cd3acf5933d1d6dbb0b011956452a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>fuelZj</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5ddd9d98039698acb6f9827cd202dab5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>fuelX</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a80611bdeb9163049f66f507a8236b151</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>fuelY</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5d22cfb1225ae05c4a49c8fd0ed37741</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>sDRs</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a55eedfc7aec0fb2fc9c74afce48de1e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>sDRs</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab5c690e301eea009d7d140f2da7b3ff6</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>defects</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a1644d330058bff8a5927b171e504553d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nZPoints</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a26cb0f85e951d356b75f00b15c263ba2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nZvarPoints</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>abe3c9391b0740d17669ad32326e3e224</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>oxidizerTemperature</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>abf6c3bef3e77fe0ddac75beb4e11562c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>fuelTemperature</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3999c898392615287223f5e1885d04cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nDefects</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ad0d1278ca467d82f63ebff4b3599d364</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>defect</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a33efb87d08be3c604590f2290d1912ce</anchor>
      <arglist>(const int) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>p</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ae0964e427c364d326538a644b2a23877</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>input</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3888231298d27cb265076b4e290751cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>interpreter</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a6b342402a8bf5688793f5e74a603c5ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Zst</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>afd9ee2045895056f97f0aaa4316317a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>YatZstu</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a91453cf04fe588b6d2d4ba76e6b94022</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>YatZstb</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af18b4930243021f7296db4b3313f6380</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Tadiabatic</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a6f358f28ca28eb021a3a1ff799edac59</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::PropertiesReader</name>
    <filename>a00016.html</filename>
    <base>AFC::StringManipulator</base>
    <member kind="function">
      <type></type>
      <name>PropertiesReader</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a1eb110972634617d8fac3645c1fbdbad</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PropertiesReader</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>aa1c8641a5574f284953d825a3dad97f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a5f21f3ecef2fff368bc6ba3a1757b08a</anchor>
      <arglist>(Properties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findKeyword</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a5f2deb2c3ace0ec3860f3598398155d4</anchor>
      <arglist>(int &amp;, unsigned int &amp;, const stringList &amp;, unsigned int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enthalpyDefects</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a6a95ede054cae41ac070d207d47ce2b9</anchor>
      <arglist>(const stringList &amp;, unsigned int, Properties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scalarDissipationRates</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a1e79712c0269e87c58a980b1fc973a85</anchor>
      <arglist>(const stringList &amp;, unsigned int, Properties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>molFractionOxidizer</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a57185b13a1144e008ad2cf2cba446970</anchor>
      <arglist>(const stringList &amp;, unsigned int, Properties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>massFractionOxidizer</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4db86c1727e093e0aae0ef15d917ca97</anchor>
      <arglist>(const stringList &amp;, unsigned int, Properties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>molFractionFuel</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ad46139a72e804f4fd82c91cb2103caaf</anchor>
      <arglist>(const stringList &amp;, unsigned int, Properties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>massFractionFuel</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a3bc330ebb9aa34d4e50df968e3dd1223</anchor>
      <arglist>(const stringList &amp;, unsigned int, Properties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>control</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>af9611a3e2fc5ca2ee96d0add5c35516a</anchor>
      <arglist>(const stringList &amp;, unsigned int, Properties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>input</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4c7d3601bcdf943c551ab10c614360d1</anchor>
      <arglist>(const word &amp;, Properties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpreter</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a74eecde3cd0e22788117efb221d31381</anchor>
      <arglist>(const stringList &amp;, unsigned int, Properties &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::Scalar</name>
    <filename>a00017.html</filename>
    <base>AFC::Tensor</base>
    <member kind="function">
      <type></type>
      <name>Scalar</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>add3870a67a8d68509d8ebf0aa151091f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scalar</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a425479418affb2b70e94278e4512c261</anchor>
      <arglist>(const Scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scalar</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad1e2b39a9fc68593fa3097c20afd80b7</anchor>
      <arglist>(const size_t, const scalar value=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scalar</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a76d505a58aad0e11ce7f1fd6f003dd15</anchor>
      <arglist>(const scalarField &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Scalar</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a9ab3ca9f8bc303d943cf1627680fbdb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>operator*</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aefea4f952fe1346a1077a6dfc8e9d2ea</anchor>
      <arglist>(const Matrix &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>operator()</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aee676c7363d0fa6a0e608413cf59d96f</anchor>
      <arglist>(const size_t &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a4e67cd4f7bc0d40767389f7fe6a76d21</anchor>
      <arglist>(const size_t, const scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3ca27034df6644c0a57e145dfbc72613</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aac782da1f912bceb5d8ad00c8dc892ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>values</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a754b7ed7cac62f9f0f177b8827f4acde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>T</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aaf1c826755cc6cf4b24e955268778372</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::Seulex</name>
    <filename>a00018.html</filename>
    <member kind="function">
      <type></type>
      <name>Seulex</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9c2f44b8da66e7073cf896380986a2b3</anchor>
      <arglist>(const Chemistry &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Seulex</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a09293a8fab692b4cfa84d658ba8c376b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a85665ea84ad63aaf88a5d2b159f2089a</anchor>
      <arglist>(const scalar, const scalar, map&lt; word, scalar &gt; &amp;, scalar &amp;, StepStatus &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::StepStatus</name>
    <filename>a00019.html</filename>
    <member kind="function">
      <type></type>
      <name>StepStatus</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a7746944cf7742e4bfe2d8a2bda46557f</anchor>
      <arglist>(const scalar)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StepStatus</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>aac59cc344cddddf09c8df23e48198938</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>forward_</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>aae1b80cda1e8b80f4a52f8a6d1f22df8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar</type>
      <name>dtTry_</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a016662ef23fae6d26431f74f72953363</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scalar</type>
      <name>dtDid_</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ad231904905a6751e019151c0bf3ae581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>firstIter_</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ae9bad496fa44d5543020ef3818334b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>lastIter_</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ad8c62af7d9a72b016c9bbb39f7f1353e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>reject_</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a7a8bbc850825f71ddca2373a42858800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>prevReject_</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>afd63abe19dae291183910d6bb68bdb91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::StringManipulator</name>
    <filename>a00020.html</filename>
    <member kind="function">
      <type></type>
      <name>StringManipulator</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aad4e8e015313d131bdb1e4f14e247652</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StringManipulator</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a11341fbaee36d76dd3534bb44f9cb11e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const stringList</type>
      <name>readFile</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a7f7b0f3af2fabd51854c3f0291437f37</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const stringList</type>
      <name>splitStrAtWS</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>af5ea30af135399d6f85ac3cf1c957a26</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const stringList</type>
      <name>splitStrAtDelimiter</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a138418d464d6e3c78f4fe5a6895d2411</anchor>
      <arglist>(const string &amp;, const char &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const stringList</type>
      <name>splitStrAtDelimiter</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aba6dee596f776f17c8f5c836d9576157</anchor>
      <arglist>(const string &amp;, const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const string</type>
      <name>removeAtEnd</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>afb94b62077645515113df0096c92e454</anchor>
      <arglist>(const string &amp;, const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFirstChar</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad2ef0a76cc630bafd9c4acc1248bf689</anchor>
      <arglist>(string &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>debug_</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a3f2abbec31eb2f843458b9efe20d92ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::Tensor</name>
    <filename>a00021.html</filename>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a09dacbd79d16b74ba8698e27ae3dc42b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a3ac5f7175dbad2d484529d499c742d36</anchor>
      <arglist>(const size_t, const size_t, const scalar value=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a7272d26e4e0b92af546ba4bd5d88788d</anchor>
      <arglist>(const size_t, const size_t, const scalarField &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Tensor</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>aed7239ca3b55714bbd290219b503ad0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>operator()</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a4dde73408461e965d363f11b03166a8f</anchor>
      <arglist>(size_t, size_t) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>operator()</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a6052953686abac5d37d7243ba691b551</anchor>
      <arglist>(size_t) const </arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a59f2821e7b5ffc2618be7e6cfb0a151f</anchor>
      <arglist>(const size_t, const size_t)</arglist>
    </member>
    <member kind="function">
      <type>scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>aaf4f3566765fed0b386bb45e8df6f6d7</anchor>
      <arglist>(const size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>afb9248ad4285e038ca8b59b5e5bb3405</anchor>
      <arglist>(size_t, size_t, scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a3ca27034df6644c0a57e145dfbc72613</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>cols</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a611d6d6ea9012b18fedcce4261845a8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>rows</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a809b02529383bbc459c62c030a96eed2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>values</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a5a0a32f1599dc8c30f69a6390d24b276</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::Thermo</name>
    <filename>a00022.html</filename>
    <member kind="function">
      <type></type>
      <name>Thermo</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a9648346de66d5e35c6165bde3be0ccf7</anchor>
      <arglist>(const string &amp;, const bool thermo=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Thermo</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0a4a2cea95f6fa20825097470972086f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>p</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ac34da40b5434d8797591b255e63a18ec</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>species</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a1b2ea072954396af4e5d695971aae3e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>MW</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a22065fd3cddcc48bc0d4b125a797aa2d</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>MW</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a17442f548685ed23684594d77de21145</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>MmeanX</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aeaebae8a069640983ee9f57d4892428f</anchor>
      <arglist>(const map&lt; word, scalar &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>cp</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aff506f4c74a8577ae644e0370247a142</anchor>
      <arglist>(const word &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>cv</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a86841c74a5001387c5d67a3f6416a764</anchor>
      <arglist>(const word &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>H</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ad98dcc3fbd905253d7d4487113791b0f</anchor>
      <arglist>(const word &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>S</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>affce03fda9606f41eb3035e7ab17d505</anchor>
      <arglist>(const word &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>G</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ab6c4efbed2d11fcf179a4ab0e593f254</anchor>
      <arglist>(const word &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>G</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a01a12f0b1eeff4fca10aead4a6c09477</anchor>
      <arglist>(const scalar &amp;, const scalar &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>p</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ae0964e427c364d326538a644b2a23877</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Hf</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a79d18c26e32a050362dc4674061c003b</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Gf</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2f0cfb064b1c4a5be2f1a01176396871</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>dHf</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>af1e43e036b6b44eb41d265a6a7a894ee</anchor>
      <arglist>(const word &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>dGf</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ac2c59180641497e33e02d8dcde148a51</anchor>
      <arglist>(const word &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>C</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>acb9daf5a020d6be50a7df8a0fad6a94d</anchor>
      <arglist>(const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>rho</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a3e7398f735e439664ca71a82eb323109</anchor>
      <arglist>(const word &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>LT</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a88f0197f9fd670848c94b3401f4ea094</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>phase</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aefa6da20537116383e30d0a02e98e2ee</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalarList</type>
      <name>elementsFactors</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>abc2647d5e0858d3bcb99ca637d6b4466</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>summary</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ae4cd32d2be2fc777e2121775daf9df4e</anchor>
      <arglist>(ostream &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NASAPolynomials</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a3528cb27b907ff2c088f69ca5ba50ce3</anchor>
      <arglist>(ostream &amp;, const word) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thermoTable</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>afe472aed33c10cfe06fbd622ac94185b</anchor>
      <arglist>(ostream &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::ThermoCalc</name>
    <filename>a00023.html</filename>
    <member kind="function">
      <type></type>
      <name>ThermoCalc</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a2a02ab0bdb21eb3e7486197caa16a9c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThermoCalc</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a6213a995caa59a79b57094b96bbe0cc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>MmeanX</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a01dbb4d7464ce46bd4c27188a022c9d8</anchor>
      <arglist>(const map&lt; word, scalar &gt; &amp;, const map&lt; word, scalar &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>MmeanY</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a51299d7b3443dd13e920ccf699d92614</anchor>
      <arglist>(const map&lt; word, scalar &gt; &amp;, const map&lt; word, scalar &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>MmeanC</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a3abfdd2e8c7edea5111f5ac52617a4ee</anchor>
      <arglist>(const map&lt; word, scalar &gt; &amp;, const map&lt; word, scalar &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>rho</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a31a002688a191111dde6bdc494cc440b</anchor>
      <arglist>(const scalar &amp;, const scalar &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>rhoMean</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ac762f920f6beb29733169d621f2650c5</anchor>
      <arglist>(const scalar &amp;, const scalar &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>C</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a2f6189c285be5cd5e39e4efd9fce9840</anchor>
      <arglist>(const scalar &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>cp</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ab6e04a0c0a0ce5a7c8c4842782f21b3a</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const ThermoData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>cv</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>abe7d373aebeb35deee129e211c5c04c4</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const ThermoData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>H</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ab1ab39e5b2213b61aa6d4b43ea203c61</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const ThermoData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>dHf</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a7b244b9e4fec22267e5bb231e270021e</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const ThermoData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>S</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a37ce3f79d1b11f6e7c2771a60e31d927</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const ThermoData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>G</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a6c54e37b3a4d3ac7f6fd712a2ccf185f</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const ThermoData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>dGf</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>adb6a3f3fd8e36e99c92a3340621c0418</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const ThermoData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>G</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a01a12f0b1eeff4fca10aead4a6c09477</anchor>
      <arglist>(const scalar &amp;, const scalar &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Hf</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>adc62799878507d255271451a5d16e667</anchor>
      <arglist>(const word &amp;, const ThermoData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>Gf</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a904b1fb3797fe5f85a688590afbbe3ae</anchor>
      <arglist>(const word &amp;, const ThermoData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>getCoeffs</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a3d228196e36ee464bf8e6506cb76c248</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const ThermoData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>whichTempRange</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4f2a25202d4a6a492f370994a6cc54fb</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const ThermoData &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::ThermoData</name>
    <filename>a00024.html</filename>
    <member kind="function">
      <type></type>
      <name>ThermoData</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a7c4c6d20fa297bd676acd0e26414e548</anchor>
      <arglist>(const bool &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThermoData</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ad5e5f83fd2f9ce201600469d42cb9739</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSpecies</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac33714452dc884aa4d8d752fa4cd0beb</anchor>
      <arglist>(const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertChemicalFormula</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a07d905653ead8b309bb847d75308fd88</anchor>
      <arglist>(const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAtomAndFactor</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>abc2700f7ce44aeed4787e5b7d8bc91b6</anchor>
      <arglist>(const word &amp;, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertMolecularWeight</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aee9240adb87ddcb37cf4d5ef0e50d6b8</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertPhase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ab4bc03128fd697be68029370913a589b</anchor>
      <arglist>(const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertLT</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac281d5ab7b99eb8a46ff21f564ebcb58</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertHT</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a2477ada5790f6ec31254e18dccc393d0</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertCT</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aa2c20f686c28221a84b93ab849923287</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNASACoeffsHT</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a0b75f9b1f9562a4d69ba8828caceefb6</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNASACoeffsLT</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a7349ee2e1435521d39bb852e8a5ba161</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAtomsAndFactorsMap</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a0285560913f589822f40f83df3b09382</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>p</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac34da40b5434d8797591b255e63a18ec</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>species</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a1b2ea072954396af4e5d695971aae3e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>formula</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ae2c0d150c3cabb7be71744d311bba334</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>MW</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a22065fd3cddcc48bc0d4b125a797aa2d</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>MW</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a17442f548685ed23684594d77de21145</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>LT</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aee2a1af71753e1b8ff3312995a3b850f</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>CT</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac30108f73006c8159cd6a85ca3f497cb</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>HT</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a09d358642b370993328e091ccc363d1c</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; scalar &gt;</type>
      <name>NASACoeffsHT</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a83cf44c3e3cbb469f5ae760cad435088</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; scalar &gt;</type>
      <name>NASACoeffsLT</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ad15a6ca3da113943f9c869383c58deb4</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>p</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ae0964e427c364d326538a644b2a23877</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>elementsInSpecies</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a878ba26dbc64155a63027fd4466a7edd</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>elementsInSpeciesChem</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>abda4a548f7f81967a8fb8c928d1b7960</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalarList</type>
      <name>elementFactors</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aa4ccd9002baa1d0466185035c60e97b7</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>elementFactors</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ae04d292aaf91e5602b3ff62a848236b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalarList</type>
      <name>elementFactorsChem</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a142465edf0a3eb3c49543b57ad5d1e54</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, scalar &gt;</type>
      <name>atomsAndFactors</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a2903407dd622ab129b68626672d35be3</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>phase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aefa6da20537116383e30d0a02e98e2ee</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>map&lt; word, word &gt;</type>
      <name>phase</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a2008f27b7c54b2527d10a31f72117f2b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::ThermoReader</name>
    <filename>a00025.html</filename>
    <base>AFC::StringManipulator</base>
    <member kind="function">
      <type></type>
      <name>ThermoReader</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a4be4e00724b89f35836ed198014604df</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThermoReader</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a2609cb3d5b16d62e72d47310db7baba2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>add9dcad46cfd97e77e2b276729a34cb6</anchor>
      <arglist>(ThermoData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readNasaPolynomials</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ac2b4cbb7e077e38445aa04e2031b3d00</anchor>
      <arglist>(const stringList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findKeyword</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aa7b2ef907017d61b0b64a64d59552005</anchor>
      <arglist>(int &amp;, unsigned int &amp;, const stringList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>calcWeight</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a13925dafe5627436e858b98135899858</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>constructFormula</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a5698e4e18974b49c2cd80e269c79d173</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>atomsAndFactors</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a60c58bb61df5f4b07b4c897d1ff9ca86</anchor>
      <arglist>(const string &amp;, ThermoData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NASAPolynomialNo1</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>af35bb069c89673a32345d833a268cc43</anchor>
      <arglist>(const string &amp;, const unsigned int &amp;, ThermoData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NASAPolynomialNo2</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a17c1079abae17dd3ec747db7e4617b7c</anchor>
      <arglist>(const string &amp;, const unsigned int &amp;, ThermoData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NASAPolynomialNo3</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a27185363beabfcbe80b323a41f8507b8</anchor>
      <arglist>(const string &amp;, const unsigned int &amp;, ThermoData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NASAPolynomialNo4</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a65785f581261fc4a0ef65af8caa7b485</anchor>
      <arglist>(const string &amp;, const unsigned int &amp;, ThermoData &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcMolecularWeight</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a42cf063dc5354434cfff0ed8cc67f79e</anchor>
      <arglist>(const word &amp;, ThermoData &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::Transport</name>
    <filename>a00026.html</filename>
    <member kind="function">
      <type></type>
      <name>Transport</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a9a285aa6fcbd41f93d5732031ae68fdb</anchor>
      <arglist>(const string &amp;, const Thermo &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Transport</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a45ce3cc028d13c85af20709887d116e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertChemistrySpecies</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>af4eae7dc92163369446a2639a046cbcb</anchor>
      <arglist>(const wordList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitCurves</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a59195ca5a68a6bbadaebfb61319b9969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>viscosity</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>afd9c542d44eb83c2620a26dc610e908c</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const word &amp;method=&quot;Hirschfelder&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>thermalConductivity</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a84c5fa1a134a6f1db31cc5c553f7c1cb</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const word &amp;method=&quot;Warnatz&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>binaryDiffusivity</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a574d6e118cef836e19a3579a5a1e82c8</anchor>
      <arglist>(const word &amp;, const word &amp;, const scalar &amp;, const word &amp;method=&quot;ChapmanAndEnskog&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>species</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a1b2ea072954396af4e5d695971aae3e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>chemistrySpecies</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a1d715be1c899655420450d4258a3d2df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>chemicalFormula</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ae0ac1e8b7024a8e1292bb826f12295c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>chemicalFormula</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a38fd6a979f3c7e82aa793e9054f030e8</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>geometricalConfig</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ac764fc4e5a656a1c443d5cfa3662991c</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>LJCD</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a70e818fb6a89ca392bf30c60ed13f965</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>LJP</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a81ee0c007fdb5c234ed102ffffb29395</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>muk</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ae0d34050310e507560176c18786d7d1f</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>alpha</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>afe2052a9db21f75d19a9d1b74255ed68</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>ZRot298</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a96d914852b7bb35d02e67c52be54a6d4</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>viscosityPolyCoeffs</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a735a9cfe8c3edaaa0d1831665ca05005</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>thermalConductivityPolyCoeffs</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a99f2c852d9e899ac37935df0e5727843</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>binaryDiffusivityPolyCoeffs</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a0b2d8a88233102f58450a378704d0820</anchor>
      <arglist>(const word &amp;, const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>summary</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ae4cd32d2be2fc777e2121775daf9df4e</anchor>
      <arglist>(ostream &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>summaryFittingProcedure</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a6bf037b198ec50f739f13007266266b5</anchor>
      <arglist>(ostream &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::TransportCalc</name>
    <filename>a00027.html</filename>
    <member kind="function">
      <type></type>
      <name>TransportCalc</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a8da80d0ae6c5d0f18e6441df35731cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TransportCalc</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>acbf127098b5bb636d3358f87fb4e8fe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>reducedCollisionIntegralOmega22</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a7189af3bc9257f680f92133d76279f13</anchor>
      <arglist>(const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>reducedCollisionIntegralOmega11</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a810cae3f92fba963661495cd31cfa488</anchor>
      <arglist>(const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>rho</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aa3f740797a5a88070cf9c6cc62e39033</anchor>
      <arglist>(const scalar &amp;, const scalar &amp;, const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>viscosity</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ab15d70f677d6da7d8347f440e968c891</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const Thermo &amp;, const TransportData &amp;, const word &amp;method=&quot;Hirschfelder&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>viscosityHirschfelder</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>accf32e6dc15f3cde0663d43862f4de89</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const scalar &amp;, const scalar &amp;, const scalar &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>viscosityChung</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a2631ee390d02c22f3616d07dec238efa</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const Thermo &amp;, const TransportData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>viscosityPolynomial</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aef2a51c5518921a7ea6e19256ae0e0e3</anchor>
      <arglist>(const scalar &amp;, const scalarField &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitViscosity</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ad7580a02f623844d056574e1ac5b352f</anchor>
      <arglist>(TransportData &amp;, const Thermo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>thermalConductivity</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a73e43b7d6817966a30e8807983cdd8b0</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const Thermo &amp;, const TransportData &amp;, const word &amp;method=&quot;Warnatz&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>thermalConductivityWarnatz</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a2ad198d8c387bb4680ab58f4d6a60a60</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const Thermo &amp;, const TransportData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>thermalConductivityWarnatzCC</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ac2785d95c6b1795d1a5bcd15eb512c51</anchor>
      <arglist>(const word &amp;, const scalar &amp;, const Thermo &amp;, const TransportData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>thermalConductivityPolynomial</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ac71375550ad21c9ff54e91d65984808e</anchor>
      <arglist>(const scalar &amp;, const scalarField &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitThermalConductivity</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a6a5b723f75c8530e1e19c6f64d14c1cf</anchor>
      <arglist>(TransportData &amp;, const Thermo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>binaryDiffusivity</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a4e77885a26986415442d042e132a4d57</anchor>
      <arglist>(const word &amp;, const word &amp;, const scalar &amp;, const Thermo &amp;, const TransportData &amp;, const word &amp;method=&quot;ChapmanAndEnskog&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>binaryDiffusivityWarnatz</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ad4951dd1f6d1282cb8db6e39ba345199</anchor>
      <arglist>(const word &amp;, const word &amp;, const scalar &amp;, const Thermo &amp;, const TransportData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>binaryDiffusivityChapmanAndEnskog</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a69375c0b362f12a071a2cfc782dac4ac</anchor>
      <arglist>(const word &amp;, const word &amp;, const scalar &amp;, const Thermo &amp;, const TransportData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>binaryDiffusivityCC</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ad0e39fc89c5905210391040f9df6133d</anchor>
      <arglist>(const word &amp;, const word &amp;, const scalar &amp;, const Thermo &amp;, const TransportData &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>binaryDiffusivityPolynomial</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a8cf031299bef8d69006a0a8c0e110312</anchor>
      <arglist>(const scalar &amp;, const scalarField &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fitBinaryDiffusivity</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a2bcd888b81c4c8cd316add0b9874f344</anchor>
      <arglist>(TransportData &amp;, const Thermo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>F</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ab4903ebfd45b876ebd7cd44db287dc43</anchor>
      <arglist>(const scalar &amp;, const scalar &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::TransportCalcCalc</name>
    <filename>a00028.html</filename>
  </compound>
  <compound kind="class">
    <name>AFC::TransportData</name>
    <filename>a00029.html</filename>
    <member kind="function">
      <type></type>
      <name>TransportData</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ad374affa5008c6365ea5500127aa2ade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TransportData</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ac9781acb557c34ab5135bff01d238730</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>viscosityPolyCoeffs</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a56da56c58c99f0662c042bd0a9be38f8</anchor>
      <arglist>(const word &amp;, const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>viscosityPolyCoeffs</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a735a9cfe8c3edaaa0d1831665ca05005</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thermalConductivityPolyCoeffs</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ad65482a3a57c9ec07f88a20d1102be90</anchor>
      <arglist>(const word &amp;, const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>thermalConductivityPolyCoeffs</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a99f2c852d9e899ac37935df0e5727843</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>binaryDiffusivityPolyCoeffs</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a3d23252ef3f6089d30e4514960c1570c</anchor>
      <arglist>(const word &amp;, const word &amp;, const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>binaryDiffusivityPolyCoeffs</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a0b2d8a88233102f58450a378704d0820</anchor>
      <arglist>(const word &amp;, const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSpecies</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ac33714452dc884aa4d8d752fa4cd0beb</anchor>
      <arglist>(const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertChemistrySpecies</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>af4eae7dc92163369446a2639a046cbcb</anchor>
      <arglist>(const wordList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertGeoConfig</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ad4c09043c8f853d9945d56069fdca852</anchor>
      <arglist>(const int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertLenJonPot</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a352155fbd8c570f3e6e996d9f5159523</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertLenJonCollDia</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a79494b359e1cf5ad398ac71ea02be81c</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertDipMom</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a3f8edc5d7191d5e6a8e6a3f939e7aacf</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAlpha</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ab96fa336ccb9dcf3498f3f88f043412f</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertZRot298</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a7e3bad9b06f481bbce2fccb2376bd3aa</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertBinarySpeciesCombinations</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a661ecf879e5bf43ce69911fa264ebe03</anchor>
      <arglist>(const word &amp;, const word &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>chemicalFormula</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a5e9e3d86f5dc8402e21b8d62e18c9149</anchor>
      <arglist>(const wordList &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>binarySpeciesCombinations</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a6b2f0c5fc6f6e86ac89fa3f06d7d6ecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>species</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a1b2ea072954396af4e5d695971aae3e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>chemicalFormula</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ae0ac1e8b7024a8e1292bb826f12295c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>chemicalFormula</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a38fd6a979f3c7e82aa793e9054f030e8</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>chemistrySpecies</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a1d715be1c899655420450d4258a3d2df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>geometricalConfig</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ac764fc4e5a656a1c443d5cfa3662991c</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>LJCD</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a70e818fb6a89ca392bf30c60ed13f965</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>LJP</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a81ee0c007fdb5c234ed102ffffb29395</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>muk</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ae0d34050310e507560176c18786d7d1f</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>alpha</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>afe2052a9db21f75d19a9d1b74255ed68</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>scalar</type>
      <name>ZRot298</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a96d914852b7bb35d02e67c52be54a6d4</anchor>
      <arglist>(const word &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::TransportReader</name>
    <filename>a00030.html</filename>
    <base>AFC::StringManipulator</base>
    <member kind="function">
      <type></type>
      <name>TransportReader</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ae606ff56cc6a6b166165cbe60043fd53</anchor>
      <arglist>(const string &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TransportReader</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a483887a9ff6bd441bed2d1590adfeaf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ad9ed7ab84712ef110531eaad07982321</anchor>
      <arglist>(TransportData &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AFC::Vector</name>
    <filename>a00031.html</filename>
    <base>AFC::Tensor</base>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a4df026156780bc0ca651c342b7d6daa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a7b597e37362cee724912b3402bbea4ba</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>af0ffacc13a48da074296ed879b9c27f1</anchor>
      <arglist>(const size_t, const scalar value=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>af49481c7583c12be253dbad6a7fb4a0f</anchor>
      <arglist>(const scalarField &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vector</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>aaa9fccd0cb7734271f7a15e5d9dc0d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator*</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a969db4cb735c9ee9f53ee0732e73913c</anchor>
      <arglist>(const Matrix &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>addb192d78f99d1cde41f018937f7527e</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>aac782da1f912bceb5d8ad00c8dc892ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>scalarField</type>
      <name>values</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a5a0a32f1599dc8c30f69a6390d24b276</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>T</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>aa5f910b606bafe6b7f37526ebe85ef18</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>AFC</name>
    <filename>a00095.html</filename>
    <namespace>AFC::Constants</namespace>
    <class kind="class">AFC::Chemistry</class>
    <class kind="class">AFC::ChemistryCalc</class>
    <class kind="class">AFC::ChemistryData</class>
    <class kind="class">AFC::ChemistryReader</class>
    <class kind="class">AFC::Constants</class>
    <class kind="class">AFC::Dimensions</class>
    <class kind="class">AFC::Euler</class>
    <class kind="class">AFC::Interpreter</class>
    <class kind="class">AFC::Jacobian</class>
    <class kind="class">AFC::LUDecompose</class>
    <class kind="class">AFC::Matrix</class>
    <class kind="class">AFC::MixtureFraction</class>
    <class kind="class">AFC::Numerics</class>
    <class kind="class">AFC::ODE</class>
    <class kind="class">AFC::Properties</class>
    <class kind="class">AFC::PropertiesReader</class>
    <class kind="class">AFC::Scalar</class>
    <class kind="class">AFC::Seulex</class>
    <class kind="class">AFC::StepStatus</class>
    <class kind="class">AFC::StringManipulator</class>
    <class kind="class">AFC::Tensor</class>
    <class kind="class">AFC::Thermo</class>
    <class kind="class">AFC::ThermoCalc</class>
    <class kind="class">AFC::ThermoData</class>
    <class kind="class">AFC::ThermoReader</class>
    <class kind="class">AFC::Transport</class>
    <class kind="class">AFC::TransportCalc</class>
    <class kind="class">AFC::TransportCalcCalc</class>
    <class kind="class">AFC::TransportData</class>
    <class kind="class">AFC::TransportReader</class>
    <class kind="class">AFC::Vector</class>
    <member kind="typedef">
      <type>std::ostream</type>
      <name>ostream</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a58341b2ccd51f2085c983d7ee1b94b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::fstream</type>
      <name>fstream</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a8aad01ad76cedf3f4ba60d7a71603ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long double</type>
      <name>scalar</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a4537c8b7c78745b95e6ee2291f1d1b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; bool &gt;</type>
      <name>boolList</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a86f6f5d9a1208a505ba86148f3fc8ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; scalar &gt;</type>
      <name>scalarField</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a8b923e52ceb7071145ce9f5766afdecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; scalar &gt;</type>
      <name>scalarList</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a890f5dad11a4123b6649865a10d7f5f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; scalarField &gt;</type>
      <name>matrix</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a86f0b346368ece36b93413ee4950e2de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>word</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a0ebe792a293e8c717bddf60070c0fe99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; word &gt;</type>
      <name>wordList</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a6a24b83b68b9ffdee59e77f44c463bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; int &gt;</type>
      <name>intList</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a3b4e6a34886e75fdefe642e4d7190b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; wordList &gt;</type>
      <name>wordMatrix</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>abab26cfb2a2d1adb6b713717941e35d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::map&lt; word, scalar &gt; &gt;</type>
      <name>wordScalarList</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aabd2ae612f3ca50144ad2f265159cba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>string</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aca454f84dd198a937af6499dd758aa3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; string &gt;</type>
      <name>stringList</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ad12b2d65e091b5883d28d8115fb94d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::vector&lt; MixtureFraction &gt; &gt;</type>
      <name>lookUpTable</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a3bcef4b926ffe5b4f482c5a06769a43c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>List</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ac3d98fcb37bbddd2912ab60645c0702b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>vector</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ae04d1c68c250f6c36de3f0dce87363cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>smartPtr</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a5f296ec745fc391a21e1e7cd545ba27b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::map&lt; T, Z &gt;</type>
      <name>map</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a0775ae6bc1ec7ffe2cbfc8a28ebc8754</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::vector&lt; map&lt; T, Z &gt; &gt;</type>
      <name>mapList</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>af9212164dd4744a2ae1784bb46f535b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Print</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a9dcac18006ce057b8d78c847174c1362</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ErrorMsg</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a0b364ed48f74db713f4700f084d3efa0</anchor>
      <arglist>(const string, const char *, const unsigned long)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Warning</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a19048bdac4a790558a97ca26ba043514</anchor>
      <arglist>(const string, const char *, const unsigned long)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>Header</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a574c52e15c08710241519d1da9d1a214</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Footer</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a8621ddf4e0d8781ed124951ca20fb3fd</anchor>
      <arglist>(const scalar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>toStr</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>aeb005eead6363ab04f3b9b8a46c493e6</anchor>
      <arglist>(const T &amp;tmp)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ac8a859be1287fbeda5e0c77336f0d02b</anchor>
      <arglist>(const T &amp;tmp1, const T &amp;tmp2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a1c5c5cea436f4ae35fdd2f5f3db85b30</anchor>
      <arglist>(const T &amp;tmp1, const T &amp;tmp2)</arglist>
    </member>
    <member kind="variable">
      <type>std::ostream &amp;</type>
      <name>Info</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>afa32e7b53fbdecf84b1be4d1fca31d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::ostream &amp;</type>
      <name>Error</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a441e4029eba329834dc60d8e15ebd2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::basic_ostream&lt; char &gt; &amp;(&amp;)</type>
      <name>endl</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ae4664256aaf88fe0568825912c2633c4</anchor>
      <arglist>(std::basic_ostream&lt; char &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>AFC::Constants</name>
    <filename>a00096.html</filename>
  </compound>
</tagfile>
