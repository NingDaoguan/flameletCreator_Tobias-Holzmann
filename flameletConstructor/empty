   //- Starting preprocessing
   /* std::cout << "\nStarting Preprocessing \n";
    std::cout << "-------------------------- \n\n";


    //------------------------------------
    //- Open transport file for properties
    //------------------------------------

    std::cout << " + Reading transport properties\n";
    transportFile_1.open("files/transport.tra", std::ios::in);
    transportFile_2.open("files/transport.tra", std::ios::in);

    if (transportFile_1.good() && transportFile_2.good())
    {
        std::cout << "   - transport.tra successfully opened\n";
    }
    else
    {
        std::cout << "   - Error while opening 'files/transport.tra'";
        exit( EXIT_FAILURE );
    }

    //- First line of file
    transportFile_1.seekg(0L, std::ios::beg);
    transportFile_2.seekg(0L, std::ios::beg);

    //- Check out how many species
    while (!transportFile_1.eof())
    {
        //- Dummy for reading line per line
        transportFile_1.getline(line, 1024);
        nSpecies++;
    }
    transportFile_1.close();

    //- Generate nSpecies objects
    species* afcSpecies = new species[nSpecies];
    for (int i=0; i<nSpecies; i++)
    {
        afcSpecies[i] = species();
    }

    //- Read transport file and fetch values for objects
    {
        int i = 0;
        char * splitChar;

        while (!transportFile_2.eof())
        {
            //- Read transport file line per line
            transportFile_2.getline(line, 1024);

            //- Split entrys
            splitChar = strtok (line," ");

            int j = 1;
            while (splitChar != NULL)
            {
                //- First entry is name
                if (j == 1)
                {
                   afcSpecies[i].setSpeciesID(i);
                   afcSpecies[i].setSpeciesName(splitChar);
                }
                //- Second entry is geomtry
                else if (j == 2)
                {
                   afcSpecies[i].setGeometry(atoi(splitChar));
                }
                //- Third entry is potential
                else if (j == 3)
                {
                   afcSpecies[i].setLJPotential(static_cast<float>(atof(splitChar)));
                }
                //- Fourth entry is collision diameter
                else if (j == 4)
                {
                    afcSpecies[i].setLJCollisionDiameter(static_cast<float>(atof(splitChar)));
                }
                //- Fifth entry is dipol moment
                else if (j == 5)
                {
                    afcSpecies[i].setDipoleMoment(static_cast<float>(atof(splitChar)));
                }
                //- Sixth entry is polarization
                else if (j == 6)
                {
                    afcSpecies[i].setPolarizability(static_cast<float>(atof(splitChar)));
                }
                //- Fifth entry is rotation relaxation collision number
                else if (j == 7)
                {
                    afcSpecies[i].setRotRelaxCollNo(static_cast<float>(atof(splitChar)));
                }
                else
                {
                    std::cout << "\n ++ ERROR: transport.tra file is not in a correct form";
                    exit(EXIT_FAILURE);
                }
                splitChar = strtok (NULL, " ");
                //std::cout << "J: " << j << "\n";
                j++;
            }
            i++;
        }
        std::cout << "   - transport properties fetched\n";
        transportFile_2.close();
        std::cout << "   - transport.tra successfully closed\n";
    }

    //-------------------------
    //- Open thermodynamic file
    //-------------------------

    std::cout << "\n + Reading thermodynamic properties (NASA-polynomials)\n";
    thermoFile.open("files/thermo.the", std::ios::in);

    if (thermoFile.good())
    {
        std::cout << "   - thermo.the successfully opened\n";
    }
    else
    {
        std::cout << "   - Error while opening 'files/thermo.the'";
        exit(EXIT_FAILURE);
    }

    //- First line of file
    thermoFile.seekg(0L, std::ios::beg);


    //- Read thermodynamic file and fetch values for objects
    {
        int i = 0;
        int l = 0;
        int speciesID;
        std::vector <std::string> splitField;

        while ( !thermoFile.eof() )
        {
            //- Read transport file line per line
            thermoFile.getline( line, 1024 );
            std::string emptyLine(line);

            //- Run till line is empty
            if (!emptyLine.empty())
            {
                //- Split first line
                if ( i == 0 )
                {
                    split( splitField, line, boost::is_any_of( " " ), boost::token_compress_on );
                }

                //- Check if first line string is "THERMO"
                if ( i == 0 && strcmp( (splitField[splitField.size()-1]).c_str(), "THERMO" ) != 0 )
                {
                    std::cout << "   - ERROR: 'files/thermo.the' has wrong entrys. Expected ONLE THERMO in first line\n";
                    exit( EXIT_FAILURE );
                }
                else if (i == 0 && strcmp( (splitField[splitField.size()-1]).c_str(), "THERMO" ) == 0)
                {
                    std:: cout << "   - First entry of thermodynamic file is okay\n";
                }

                //- Start reading thermodynamic lines
                if (i >= 2)
                {
                    //- Every species has 4 lines
                    //- First line
                    if (l == 0)
                    {
                        split( splitField, line, boost::is_any_of( " " ), boost::token_compress_on );

                        //- Check if last entry takes number 1
                        if( strcmp( (splitField[splitField.size()-1]).c_str(), "1" ) != 0 )
                        {
                            std::cout << "   - ERROR: 'files/thermo.the' has wrong entrys. Expected '1' as last element of array; thermo.the line: " << i+1 << "\n";
                            exit( EXIT_FAILURE );
                        }

                        //- Search object for saving data
                        for( int i = 0; i < nSpecies; i++)
                        {
                            if( strcmp( afcSpecies[i].getSpeciesName(), (splitField[0]).c_str() ) == 0 )
                            {
                                speciesID = i;
                            }
                        }

                        //- Set low temperature
                        afcSpecies[speciesID].setLowTemperature(atoi((splitField[splitField.size()-4]).c_str()));

                        //- Set mid temperature
                        afcSpecies[speciesID].setMidTemperature(atoi((splitField[splitField.size()-2]).c_str()));

                        //- Set high temperatur
                        afcSpecies[speciesID].setHighTemperature(atoi((splitField[splitField.size()-3]).c_str()));

                        //- l++ for line 2
                        l++;
                    }
                    //- FIRST LINE OF COEFFICENTS
                    else if ( l == 1 )
                    {
                        std::string tmp(line);

                        //- Set the first line of coefficients
                        afcSpecies[speciesID].setFirstLineOfCoefficients
                        (
                            atof(tmp.substr(0,15).c_str()),
                            atof(tmp.substr(15,15).c_str()),
                            atof(tmp.substr(30,15).c_str()),
                            atof(tmp.substr(45,15).c_str()),
                            atof(tmp.substr(60,15).c_str())
                        );

                        l++;
                    }
                    //- SECOND LINE OF COEFFICENTS
                    else if ( l == 2 )
                    {
                        std::string tmp(line);

                        //- Set the second line of coefficients
                        afcSpecies[speciesID].setSecondLineOfCoefficients
                        (
                            atof(tmp.substr(0,15).c_str()),
                            atof(tmp.substr(15,15).c_str()),
                            atof(tmp.substr(30,15).c_str()),
                            atof(tmp.substr(45,15).c_str()),
                            atof(tmp.substr(60,15).c_str())
                        );

                        l++;
                    }
                    //- THIRD LINE OF COEFFICENTS
                    else
                    {
                        std::string tmp(line);

                        //- Set the third line of coefficients
                        afcSpecies[speciesID].setThirdLineOfCoefficients
                        (
                            atof(tmp.substr(0,15).c_str()),
                            atof(tmp.substr(15,15).c_str()),
                            atof(tmp.substr(30,15).c_str()),
                            atof(tmp.substr(45,15).c_str())
                        );

                        l=0;
                    }
                }
                i++;
            }
        }
        std::cout << "   - thermodynamic data fetched\n";
        thermoFile.close();
        std::cout << "   - thermo.the successfully closed\n";
    }


    //-------------------
    //- Open kinetic file
    //-------------------

    std::cout << "\n + Reading kinetic file (chemistry)\n";
    kineticFile.open("files/kinetic.kin", std::ios::in);

    if (kineticFile.good())
    {
        std::cout << "   - kinetic.kin successfully opened\n";
    }
    else
    {
        std::cout << "   - Error while opening 'files/kinetic.kin'";
        exit(EXIT_FAILURE);
    }

    //- First line of file
    kineticFile.seekg(0L, std::ios::beg);

    //- Read kinetic file and fetch values for objects
    {
        int i = 1;
        std::vector <std::string> splitField;

        while ( !kineticFile.eof() )
        {
            //- Read transport file line per line
            kineticFile.getline( line, 1024 );
            std::string skipLine(line);

            //- Skip lines
            if( skipLine.empty() || strncmp((skipLine).c_str(), "!", 1) == 0 )
            {
                if ( i == 1)
                {
                    std::cout << "      ° Skip line " << i;
                }
                else
                {
                    std::cout << " " << i;
                }
            }

            //- Read lines
            else
            {
                //- Elements
                if (strncmp((skipLine).c_str(), "ELEMENTS", 8) == 0) std::cout << "      ° ELEMENT in line " << i;


            }

            //- Counter lines
            i++;
        }    delete []afcSpecies;
    std::cout << "\nObjects successfully destroyed...\n";


    }/*for(int i = 0; i<386; i++)
    {
        if(  strcmp( afcSpecies[i].getSpeciesName(), "H2O" ) == 0 )
        {
            //std::cout << "Species: " << afcSpecies[i].getSpeciesName() << "\n ---------------\n";
            //afcSpecies[i].getHighTemperatureCoefficents(); std::cout << "\n\n";
            //afcSpecies[i].getLowTemperatureCoefficents(); std::cout << "\n";
            std::cout << "-------------------------\n";
            std::cout << "cp(275) = " << afcSpecies[i].calculateHeatCapacity(275, Rm, afcSpecies[i].getLowTemperature(), afcSpecies[i].getMidTemperature(), afcSpecies[i].getHighTemperature()) << "\n";
            std::cout << "cp(500) = " << afcSpecies[i].calculateHeatCapacity(500, Rm, afcSpecies[i].getLowTemperature(), afcSpecies[i].getMidTemperature(), afcSpecies[i].getHighTemperature()) << "\n";
            std::cout << "cp(5100) = " << afcSpecies[i].calculateHeatCapacity(5100, Rm, afcSpecies[i].getLowTemperature(), afcSpecies[i].getMidTemperature(), afcSpecies[i].getHighTemperature()) << "\n";
            std::cout << "cp(100) = " << afcSpecies[i].calculateHeatCapacity(100, Rm, afcSpecies[i].getLowTemperature(), afcSpecies[i].getMidTemperature(), afcSpecies[i].getHighTemperature()) << "\n";
        }
    }*/
